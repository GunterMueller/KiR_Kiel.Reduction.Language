head	1.1;
access;
symbols
	continuation_based_interactions:1.1
	pre_interactions:1.1
	nCUBE~:1.1
	red2:1.1;
locks; strict;
comment	@# @;


1.1
date	93.11.02.13.43.39;	author car;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#! /bin/awk -f

BEGIN	{
		printf ("/* some measure-macros\n\n");
		printf ("   This file is automatically generated\n");
		printf ("   DO NOT EDIT BELOW ! */\n\n");

		printf ("#ifndef _d_mess_groups\n#define _d_mess_groups\n\n");
#		printf ("#include %cd_mess_names.h%c\n\n", 34, 34);
		printf ("extern char *mess_names[]; /* names */\n");
		printf ("extern char d_bitmask[]; /* bitmask (?!) */\n\n");

		printf ("#define D_M_CHECK(nr) (d_bitmask[nr] == '1')\n\n");

		printf("/* this is no measure point */\n");
		printf("#ifndef M_BINARY\n");
		printf("#define MPRINT_SPECIAL(F, TIME, PROC, PID, NR, BASE) \\\n");
		printf("\tfprintf(F, %c%%.lf %%d %%d SPECIAL %%d %%d\\n%c", 34, 34);
		printf(", TIME, PROC, PID, NR, BASE)\n");
		printf("#else\n");
		printf("#define MPRINT_SPECIAL(F, TIME, PROC, PID, NR, BASE) \\\n");
		printf("        M_TIMER_TYPE_BUF = TIME, fwrite(&M_TIMER_TYPE_BUF, sizeof(M_TIMER_TYPE), 1, F), \\\n");
		printf("        M_BINARY_COUNT = sizeof(PROCESS_NR_TYPE) + sizeof(PROCESS_PID_TYPE) + sizeof(M_CHAR_BUF) + sizeof(M_INT_BUF) + sizeof(M_INT_BUF), \\\n");
		printf("        fwrite(&M_BINARY_COUNT, sizeof(M_BINARY_COUNT_TYPE), 1, F), \\\n");
		printf("        PROCESS_NR_BUF = PROC, fwrite(&PROCESS_NR_BUF, sizeof(PROCESS_NR_TYPE), 1, F), \\\n");
		printf("        PROCESS_PID_BUF = M_SWAP(PID), fwrite(&PROCESS_PID_BUF, sizeof(PROCESS_PID_TYPE), 1, F), \\\n");
		printf("        M_CHAR_BUF = 0; fwrite(&M_CHAR_BUF, sizeof(M_CHAR_BUF), 1, F), \\\n");
		printf("        M_INT_BUF = M_SWAP(NR), fwrite(&M_INT_BUF, sizeof(M_INT_BUF), 1, F), \\\n");
		printf("        M_INT_BUF = M_SWAP(BASE), fwrite(&M_INT_BUF, sizeof(M_INT_BUF), 1, F)\n");
		printf("#endif\n\n");

		printf("#define MPRINT_ASCII_COUNT(F, TIME, PROC, PID, NR) \\\n");
		printf("\tfprintf(F, %c%%.lf %%d %%d %%s\\n%c", 34, 34);
		printf(", TIME, PROC, PID, mess_names[NR])\n");

		printf("#define MPRINT_BINARY_COUNT(F, TIME, PROC, PID, NR) \\\n");
		printf("	M_TIMER_TYPE_BUF = TIME, fwrite(&M_TIMER_TYPE_BUF, sizeof(M_TIMER_TYPE), 1, F), \\\n");
		printf("        M_BINARY_COUNT = sizeof(PROCESS_NR_TYPE) + sizeof(PROCESS_PID_TYPE) + sizeof(M_CHAR_BUF), \\\n");
		printf("	fwrite(&M_BINARY_COUNT, sizeof(M_BINARY_COUNT_TYPE), 1, F), \\\n");
		printf("	PROCESS_NR_BUF = PROC, fwrite(&PROCESS_NR_BUF, sizeof(PROCESS_NR_TYPE), 1, F), \\\n");
		printf("	PROCESS_PID_BUF = M_SWAP(PID), fwrite(&PROCESS_PID_BUF, sizeof(PROCESS_PID_TYPE), 1, F), \\\n");
		printf("	M_CHAR_BUF = NR, fwrite(&M_CHAR_BUF, sizeof(M_CHAR_BUF), 1, F)\n");

		printf("#ifndef M_BINARY\n");
		printf("#define MPRINT_COUNT(F, TIME, PROC, PID, NAME) \\\n");
		printf("\tMPRINT_ASCII_COUNT(F, TIME, PROC, PID, NAME)\n");
		printf("#else\n");
		printf("#define MPRINT_COUNT(F, TIME, PROC, PID, NAME) \\\n");
		printf("\tMPRINT_BINARY_COUNT(F, TIME, PROC, PID, NAME)\n");
		printf("#endif\n");

                mindex = 1;
	}

/^\t/	{
		if(NF) {
			printf("\n#define MINDEX_%s %d\n", $1, mindex++);
			if (substr($1, 1, 6) == "COUNT_") {
			  printf("#define D_M_C_%s D_M_CHECK(%s)\n", \
	                    substr($1, 7, length($1)), mindex-1); }
			else {
                          printf("#define D_M_C_%s D_M_CHECK(%s)\n", $1, mindex-1); }

			if(substr($1, 1, 6) != "COUNT_") {
				printf("#define MPRINT_ASCII_"$1"(F, TIME, PROC, PID");
				for(i=2; i<=NF; ++i) {
					printf(", "substr($i, 2));
				  }
				printf(") \\\n");

				printf("\tfprintf(F, %c%%.lf %%d %%d %s", 34, $1);
				for(i=2; i<=NF; ++i) {
					if(substr($i, 1, 1)=="#") {
						printf(" %%d");
					} else {
						printf(" %%s");
					}
				}
				printf("\\n%c, TIME, PROC, PID", 34);
				for(i=2; i<=NF; ++i) {
					printf(", "substr($i, 2));
				}
				printf(")\n");

				printf("#define MPRINT_BINARY_"$1"(F, TIME, PROC, PID");
				for(i=2; i<=NF; ++i) {
					printf(", "substr($i, 2));
				  }
				printf(") \\\n");

				printf("\tM_TIMER_TYPE_BUF = TIME, fwrite(&M_TIMER_TYPE_BUF, sizeof(M_TIMER_TYPE), 1, F), \\\n");
				printf("\tM_BINARY_COUNT = sizeof(PROCESS_NR_TYPE) + sizeof(PROCESS_PID_TYPE) + sizeof(M_CHAR_BUF)");

                                SUPERVAR = "";
				for(i=2; i<=NF; ++i) {
					if(substr($i, 1, 1)=="#") {
						SUPERVAR = SUPERVAR" + sizeof(M_INT_BUF)";
					} else {
						SUPERVAR = SUPERVAR" + strlen("substr($i, 2)")+1";
					}
				}
 
				printf (SUPERVAR", \\\n");
				printf("\tfwrite(&M_BINARY_COUNT, sizeof(M_BINARY_COUNT_TYPE), 1, F), \\\n");
				printf("\tPROCESS_NR_BUF = PROC, fwrite(&PROCESS_NR_BUF, sizeof(PROCESS_NR_TYPE), 1, F), \\\n");
				printf("\tPROCESS_PID_BUF = M_SWAP(PID), fwrite(&PROCESS_PID_BUF, sizeof(PROCESS_PID_TYPE), 1, F), \\\n");
				printf("\tM_CHAR_BUF = MINDEX_%s, fwrite(&M_CHAR_BUF, sizeof(M_CHAR_BUF), 1, F), \\\n", $1);

				for(i=2; i<=NF; ++i) { 
					if(substr($i, 1, 1)=="#") {
						printf("\tM_INT_BUF = M_SWAP("substr($i, 2)"), fwrite(&M_INT_BUF, sizeof(M_INT_BUF), 1, F), \\\n");
					} else {
						printf("\tM_PCHAR_BUF = "substr($i, 2)", fwrite(M_PCHAR_BUF, strlen(M_PCHAR_BUF)+1, 1, F), \\\n");
					}
				}
				printf("\t1\n");

				printf("#ifdef M_BINARY\n");
				printf("#define MPRINT_"$1"(F, TIME, PROC, PID");
				for(i=2; i<=NF; ++i) {
					 printf(", "substr($i, 2));
				}
				printf(") \\\n");
				printf("\tMPRINT_BINARY_"$1"(F, TIME, PROC, PID");
				for(i=2; i<=NF; ++i) {
					printf(", "substr($i, 2));
				}
				printf(")\n#else\n");

				printf("#define MPRINT_"$1"(F, TIME, PROC, PID");
				for(i=2; i<=NF; ++i) {
					printf(", "substr($i, 2));
				}
				printf(") \\\n");
				printf("\tMPRINT_ASCII_"$1"(F, TIME, PROC, PID");
				for(i=2; i<=NF; ++i) {
					printf(", "substr($i, 2));
				}
				printf(")\n#endif\n");
			}
		}
	}
END {
		printf ("\n#endif /* _d_mess_groups */\n");
}
@
