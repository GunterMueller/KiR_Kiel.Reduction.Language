head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	96.03.13.13.51.27;	author stt;	state Exp;
branches;
next	;


desc
@How to implement interactions in KiR
@


1.1
log
@Initial revision
@
text
@How to implement an Interaction in KiR

To implement an interaction, you need a stack element to represent the
interaction, a C function which executes it and entries in several tables.
There are three main parts: the editor, the reduction unit (reduma) and, if you
wish, the compiling version of pi-red, tasm. 

First, you have to find the smallest free index for your interaction, maybe a
free entry in intact_tab[] (rintact.c) or size(intact_tab[]). The general
appearance of a stack element in the editor is 0x80ii00j1, where ii is the index
and j the arity of the interaction. In the reduma, the last digit isn't 1 but 8,
i.e. 0x80ii00j8. 

In the following, we use the interaction remove() as an example. It has index
0x12 and arity 1. 

The editor

 Define the stack element in cencod.h: #define IA_REMOVE 0x80120011L
 In ciotab.c, add one entry to kwtb[] and interactions[].
      kwtb[]: ,E_FUNC, IA_REMOVE, "remove", "", 0,5,0 | PREDEF 
      interactions[]: ,"remove"   ,IA_REMOVE  ,func_arity(IA_REMOVE)


The reduma

 Define the stack element in rstelem.h: 
     #define P_IA_REMOVE     P_IFUNCCOMPL 
     #define _IA_REMOVE      0x8012 
     #define IA_REMOVE       SA_I(_IA_REMOVE,1) 
     #define T_IA_REMOVE(x)  (((x) & P_IA_REMOVE) == IA_REMOVE)
 In rintact.c, add one entry to intact_tab[]: 
     ,{red_remove, "ia_remove"} 
   The entry must be the 19th in the table, i.e. its position must match the
   index of the interaction plus 1 (index of remove is 18 (0x12) and the first
   entry has index 0).
 Add a prototype of red_remove() in rintact.h.
 Add the definition of red_remove(), the C function which executes the
   interaction, to riafunc.c.


Tasm

 To recognize interactions in the ASM code, add 
     ia_remove{OPTTYPES}    {yylval.primf.types=str2type(yytext); return
     IA_REMOVE;} 
     to tasm2c.l and 
     %token  IA_REMOVE and 
     interact: IA_REMOVE {$$.prf=ia_remove; $$.types=$1.types; uses_apply=TRUE;}
   to tasm2c.y.
 In mytypes.h, add ia_remove to the enumeration IACTION. Again, the
   position of ia_remove must match the index of IA_REMOVE plus 1. 
 In support.c, add 'case ia_remove:' to get_ia_arity().


That's all, but I surely have forgotten something. :-)

@
