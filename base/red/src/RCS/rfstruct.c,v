head	1.11;
access;
symbols
	continuation_based_interactions:1.4
	pre_interactions:1.4;
locks; strict;
comment	@ * @;


1.11
date	96.02.20.12.50.59;	author cr;	state Exp;
branches;
next	1.10;

1.10
date	96.02.15.15.36.49;	author cr;	state Exp;
branches;
next	1.9;

1.9
date	95.12.15.17.41.47;	author cr;	state Exp;
branches;
next	1.8;

1.8
date	95.12.14.16.52.09;	author rs;	state Exp;
branches;
next	1.7;

1.7
date	95.12.11.18.25.10;	author cr;	state Exp;
branches;
next	1.6;

1.6
date	95.12.11.13.13.46;	author cr;	state Exp;
branches;
next	1.5;

1.5
date	95.11.20.17.07.04;	author cr;	state Exp;
branches;
next	1.4;

1.4
date	95.05.22.09.17.12;	author rs;	state Exp;
branches;
next	1.3;

1.3
date	95.03.28.14.29.02;	author cr;	state Exp;
branches;
next	1.2;

1.2
date	95.03.22.18.55.41;	author cr;	state Exp;
branches;
next	1.1;

1.1
date	95.03.22.14.40.11;	author cr;	state Exp;
branches;
next	;


desc
@Functions on Frames
@


1.11
log
@now one file for implicit and explicit refcounting versions (flag NOREF)
@
text
@/* $Log: rfstruct.c,v $
 * Revision 1.10  1996/02/15  15:36:49  cr
 * modified red_update and red_delete for use with tasm
 * don't use stacks
 *
 * Revision 1.9  1995/12/15  17:41:47  cr
 * use W as working stack :-)
 *
 * Revision 1.8  1995/12/14  16:52:09  rs
 * including: rstack.h
 *
 * Revision 1.7  1995/12/11  18:25:10  cr
 * support for empty frames: NILSTRUCT
 *
 * Revision 1.6  1995/12/11  13:13:46  cr
 * two more operations on frames: FR_SLOTS,FR_DELETE
 *
 * Revision 1.5  1995/11/20  17:07:04  cr
 * no NEWDESC while RES_HEAP ..
 *
 * Revision 1.4  1995/05/22  09:17:12  rs
 * chan..err.. changed nCUBE to D_SLAVE !
 *
 * Revision 1.3  1995/03/28  14:29:02  cr
 * bug fixed in red_update
 *
 * Revision 1.2  1995/03/22  18:55:41  cr
 * added red_test
 * */


/*****************************************************************************/
/*                         MODULE FOR PROCESSING PHASE                       */
/* ------------------------------------------------------------------------- */
/* rfstruct.c  (also used as nr_rfstruct.c for tasm-lib)                     */
/*                                                                           */
/* special functions :                                                       */
/* -------------------                                                       */
/*  Functions for manipulation of frames                                     */
/*                                                                           */
/*  FRAME functions :                                                        */
/*  -- external:  red_fselect, red_test, red_update, red_delete, red_slots   */
/*                                                                           */
/*  Variants that don't do reference counting for their arguments are also   */
/*      generated from this source file (FLAG NOREF):                        */
/*  nr_red_fselect, nr_red_test, nr_red_update, nr_red_delete, nr_red_slots  */
/*                                                                           */
/* (Frames are simple slot-lists now.                                        */
/*  Better implementation -hashing- needed?)                                 */
/*****************************************************************************/

/* set prefix for function names and control refcounting for arguments */
#if NOREF
#define PREFIX(f)  nr_red ## f
#define ARG_DEC_REFCNT(arg)
#else
#define PREFIX(f)  red ## f
#define ARG_DEC_REFCNT(arg) DEC_REFCNT(arg)
#endif

#include "rstdinc.h"
#if D_SLAVE
#include "rncstack.h"
#else
#include "rstackty.h"
#endif
#include "rheapty.h"
#include "rstelem.h"
#include "rextern.h"
#include "rmeasure.h"
#include <setjmp.h>

#include "dbug.h"



/* Include - File for  List- / Matrix- / Vector- / TVector-                  */
/* structuring functions : he contain extern variable , extern function      */
/* declarations and defines for the structuring functions.                   */
#include "rlmvt.h"
extern  BOOLEAN str_eq();         /* rlogfunc.c */
extern  void stack_error();       /* rstack.c */

#if DEBUG
extern void res_heap(); /* TB, 4.11.1992 */        /* rheap.c */
extern void rel_heap(); /* TB, 4.11.1992 */        /* rheap.c */
extern void test_dec_refcnt(); /* TB, 4.11.1992 */ /* rheap.c */
extern void test_inc_refcnt(); /* TB, 4.11.1992 */ /* rheap.c */
extern void DescDump(); /* TB, 4.11.1992 */        /* rdesc.c */
extern void inc_idcnt(); /* TB, 4.11.1992 */       /* rheap.c */
#endif

/* RS 6.11.1992 */ 
extern void disable_scav();                /* rscavenge.c */
extern void enable_scav();                 /* rscavenge.c */
/* END of RS 6.11.1992 */ 

/*****************************************************************************/
/*                              red_test                                     */
/*---------------------------------------------------------------------------*/
/* function  : test for existence of named slot in given frame               */
/*                                                                           */
/*             lselect : frame  x  string  ==>  boolean                      */
/*                                                                           */
/* parameter : arg1  -  C_FRAME with TY_FRAME                                */
/*             arg2  -  name of slot to test for                             */
/*****************************************************************************/
int PREFIX(_test)(arg1,arg2)
register STACKELEM arg1,arg2;
{

  DBUG_ENTER ("PREFIX(_test)");

  START_MODUL("PREFIX(_test)");
  if (   (T_POINTER(arg1) && R_DESC(DESC(arg1),class) == C_FRAME
                          && R_DESC(DESC(arg1),type) == TY_FRAME)
      && (T_POINTER(arg2) && R_DESC(DESC(arg2),class) == C_LIST
                          && R_DESC(DESC(arg2),type) == TY_STRING))
  {
    int index;
    PTR_DESCRIPTOR slot;

    for(index=0; index < (int) R_FRAME(DESC(arg1),dim); index++)
    {
        slot = (PTR_DESCRIPTOR)(R_FRAME(DESC(arg1),slots)[index]); 
        if (str_eq(R_SLOT(*slot,name),(PTR_DESCRIPTOR)arg2))
        {
            _desc = (PTR_DESCRIPTOR)SA_TRUE;
            ARG_DEC_REFCNT((PTR_DESCRIPTOR)arg1);
            ARG_DEC_REFCNT((PTR_DESCRIPTOR)arg2);

            END_MODUL("PREFIX(_test)");
            DBUG_RETURN(1);
        }
    }
    _desc = (PTR_DESCRIPTOR)SA_FALSE;
    ARG_DEC_REFCNT((PTR_DESCRIPTOR)arg1);
    ARG_DEC_REFCNT((PTR_DESCRIPTOR)arg2);

    END_MODUL("PREFIX(_test)");
    DBUG_RETURN(1);
  }
  /* fail */
  END_MODUL("PREFIX(_test)");
  DBUG_RETURN(0);
} /**** end of function red_test ****/


/*****************************************************************************/
/*                              red_fselect                                  */
/*---------------------------------------------------------------------------*/
/* function  : get value from named slot in given frame                      */
/*                                                                           */
/*             lselect : frame  x  string  ==>  expr                         */
/*                                                                           */
/* parameter : arg1  -  C_FRAME with TY_FRAME                                */
/*             arg2  -  name of slot to select                               */
/*****************************************************************************/
int PREFIX(_fselect)(arg1,arg2)
register STACKELEM arg1,arg2;
{

  DBUG_ENTER ("PREFIX(_fselect)");

  START_MODUL("PREFIX(_fselect)");
  if (   (T_POINTER(arg1) && R_DESC(DESC(arg1),class) == C_FRAME
                          && R_DESC(DESC(arg1),type) == TY_FRAME)
      && (T_POINTER(arg2) && R_DESC(DESC(arg2),class) == C_LIST
                          && R_DESC(DESC(arg2),type) == TY_STRING))
  {
    int index;
    PTR_DESCRIPTOR slot;

    for(index=0; index < (int) R_FRAME(DESC(arg1),dim); index++)
    {
        slot = (PTR_DESCRIPTOR)(R_FRAME(DESC(arg1),slots)[index]); 
        if (str_eq(R_SLOT(*slot,name),(PTR_DESCRIPTOR)arg2))
        {
            _desc = (PTR_DESCRIPTOR)R_SLOT(*slot,value);
            if (T_POINTER((STACKELEM)_desc)) INC_REFCNT(_desc);
            ARG_DEC_REFCNT((PTR_DESCRIPTOR)arg1);
            ARG_DEC_REFCNT((PTR_DESCRIPTOR)arg2);

            END_MODUL("PREFIX(_fselect)");
            DBUG_RETURN(2);
        }
    }
  }
  /* fail */
  END_MODUL("PREFIX(_fselect)");
  DBUG_RETURN(0);
} /**** end of function red_fselect ****/

/*****************************************************************************/
/*                           red_update                                      */
/*---------------------------------------------------------------------------*/
/* function  : replace value of named slot in frame                          */
/*                                                                           */
/*             update : frame x string x expr -> frame                       */
/*                                                                           */
/* parameter : arg1 - frame to be updated                                    */
/*             arg2 - name of slot                                           */
/*             arg3 - new value                                              */
/*                                                                           */
/* (slot will be added if missing)                                           */
/*****************************************************************************/
int PREFIX(_update)(arg1,arg2,arg3)
register STACKELEM arg1,arg2,arg3;
{

  DBUG_ENTER ("PREFIX(_update)");

  START_MODUL("PREFIX(_update)");
  if (   (T_POINTER(arg1) && R_DESC(DESC(arg1),class) == C_FRAME
                          && R_DESC(DESC(arg1),type) == TY_FRAME)
      && (T_POINTER(arg2) && R_DESC(DESC(arg2),class) == C_LIST
                          && R_DESC(DESC(arg2),type) == TY_STRING))
  {
    int index,count=0,exists=-1;
    PTR_DESCRIPTOR newslot,slot;

    NEWDESC(newslot); TESTDESC(newslot);
    DESC_MASK(newslot,1,C_FRAME,TY_SLOT);
    L_SLOT(*newslot,name) = (PTR_DESCRIPTOR)arg2;
    L_SLOT(*newslot,value) = (T_HEAPELEM)arg3;

    count = (int)R_FRAME(DESC(arg1),dim);

    for(index=0; index < count ; index++)
    {
        slot = (PTR_DESCRIPTOR)(R_FRAME(DESC(arg1),slots)[index]); 
        if (str_eq(R_SLOT(*slot,name),(PTR_DESCRIPTOR)arg2))
          exists = index; 
    }

    if ((R_DESC(DESC(arg1),ref_count) == 1) && (exists != -1))
    {
        _desc = (PTR_DESCRIPTOR)arg1;

#if NOREF
        INC_REFCNT(_desc); /* to correct implicit refcounting of arg1 */
#endif

        DEC_REFCNT((PTR_DESCRIPTOR)R_FRAME(DESC(arg1),slots)[exists]);
        L_FRAME(*_desc,slots)[exists] = (T_HEAPELEM)newslot;
    }
    else
    {
        NEWDESC(_desc); TEST_DESC;
        DESC_MASK(_desc,1,C_FRAME,TY_FRAME);

        L_FRAME(*_desc,dim) = ( (exists == -1) ? count+1 : count );
        NEWHEAP(R_FRAME(*_desc,dim),A_FRAME(*_desc,slots));

        for(index=0; index < count ; index++)
        {
            slot = (PTR_DESCRIPTOR)(R_FRAME(DESC(arg1),slots)[index]); 
            INC_REFCNT(slot);
            L_FRAME(*_desc,slots)[index] = (T_HEAPELEM)slot;
        }

        if (exists == -1)
        {
            L_FRAME(*_desc,slots)[count] = (T_HEAPELEM)newslot;
        }
        else
        {
            DEC_REFCNT((PTR_DESCRIPTOR)R_FRAME(DESC(arg1),slots)[exists]);
            L_FRAME(*_desc,slots)[exists] = (T_HEAPELEM)newslot;
        }

        ARG_DEC_REFCNT((PTR_DESCRIPTOR)arg1);
    }
/*    RES_HEAP; REL_HEAP; not used here */

    END_MODUL("PREFIX(_update)");
    DBUG_RETURN(2);

  }
  /* fail */
  END_MODUL("PREFIX(_update)");
  DBUG_RETURN(0);
} /**** end of function red_update ****/




/*****************************************************************************/
/*                           red_delete                                      */
/*---------------------------------------------------------------------------*/
/* function  : delete named slot in frame                                    */
/*                                                                           */
/*             delete : frame x string -> frame                              */
/*                                                                           */
/* parameter : arg1 - frame to be modified                                   */
/*             arg2 - name of slot                                           */
/*                                                                           */
/*****************************************************************************/
int PREFIX(_delete)(arg1,arg2)
register STACKELEM arg1,arg2;
{

  DBUG_ENTER ("PREFIX(_delete)");

  START_MODUL("PREFIX(_delete)");
  if (   (T_POINTER(arg1) && R_DESC(DESC(arg1),class) == C_FRAME
                          && R_DESC(DESC(arg1),type) == TY_FRAME)
      && (T_POINTER(arg2) && R_DESC(DESC(arg2),class) == C_LIST
                          && R_DESC(DESC(arg2),type) == TY_STRING))
  {
    int index,dim,exists=-1;
    PTR_DESCRIPTOR slot;

    dim = (int) R_FRAME(DESC(arg1),dim);

    for(index=0; index < dim ; index++)
    {
        slot = (PTR_DESCRIPTOR)(R_FRAME(DESC(arg1),slots)[index]); 
        if (str_eq(R_SLOT(*slot,name),(PTR_DESCRIPTOR)arg2))
          exists = index;
    }

    ARG_DEC_REFCNT((PTR_DESCRIPTOR)arg2);

    if (exists == -1)
    {
        _desc = (PTR_DESCRIPTOR)arg1;
#if NOREF
        INC_REFCNT(_desc); /* to correct implicit refcounting of arg1 */
#endif
        END_MODUL("PREFIX(_delete)");
        DBUG_RETURN(1);
    }
    else
    {
        NEWDESC(_desc); TEST_DESC;
        DESC_MASK(_desc,1,C_FRAME,TY_FRAME);
        L_FRAME(*_desc,dim) = dim-1;
        NEWHEAP(R_FRAME(*_desc,dim),A_FRAME(*_desc,slots));

        for(index=0; index < exists ; index++)
        {
            slot = (PTR_DESCRIPTOR)(R_FRAME(DESC(arg1),slots)[index]); 
            INC_REFCNT(slot);
            L_FRAME(*_desc,slots)[index] = (T_HEAPELEM)slot;
        }

        for(index=exists+1; index < dim ; index++)
        {
            slot = (PTR_DESCRIPTOR)(R_FRAME(DESC(arg1),slots)[index]); 
            INC_REFCNT(slot);
            L_FRAME(*_desc,slots)[index-1] = (T_HEAPELEM)slot;
        }

        ARG_DEC_REFCNT((PTR_DESCRIPTOR)arg1);
    }

/*    RES_HEAP; REL_HEAP; not used here */

    END_MODUL("PREFIX(_delete)");
    DBUG_RETURN(2);

  }
  /* fail */
  END_MODUL("PREFIX(_delete)");
  DBUG_RETURN(0);
} /**** end of function red_delete ****/


/*****************************************************************************/
/*                           red_slots                                       */
/*---------------------------------------------------------------------------*/
/* function  : return list of slotnames in frame                             */
/*                                                                           */
/*             update : frame -> list of strings                             */
/*                                                                           */
/* parameter : arg1 - frame to be inspected                                  */
/*                                                                           */
/*****************************************************************************/
int PREFIX(_slots)(arg1)
register STACKELEM arg1;
{

  DBUG_ENTER ("PREFIX(_slots)");

  START_MODUL("PREFIX(_slots)");
  if (T_POINTER(arg1) && R_DESC(DESC(arg1),class) == C_FRAME
                      && R_DESC(DESC(arg1),type) == TY_FRAME)
  {
    int index,dim;
    PTR_DESCRIPTOR slot,name;

    dim = (int) R_FRAME(DESC(arg1),dim);

    if (dim == 0)
    {
      ARG_DEC_REFCNT((PTR_DESCRIPTOR)arg1);
      _desc = _nil;
      INC_REFCNT(_nil);
      END_MODUL("PREFIX(_slots)");
      DBUG_RETURN(1);
    }


    NEWDESC(_desc); TEST_DESC;
    LI_DESC_MASK(_desc,1,C_LIST,TY_UNDEF);
    L_LIST(*_desc,dim) = dim;
    NEWHEAP(R_LIST(*_desc,dim),A_LIST(*_desc,ptdv));

    RES_HEAP;

    for(index=0; index < dim ; index++)
    {
        slot = (PTR_DESCRIPTOR)(R_FRAME(DESC(arg1),slots)[index]); 
        name = (PTR_DESCRIPTOR)(R_SLOT(*slot,name)); 
        INC_REFCNT(name);
        L_LIST(*_desc,ptdv)[index] = (T_HEAPELEM)name;
    }
    REL_HEAP;

    ARG_DEC_REFCNT((PTR_DESCRIPTOR)arg1);

    END_MODUL("PREFIX(_slots)");
    DBUG_RETURN(2);

  }
  /* fail */
  END_MODUL("PREFIX(_slots)");
  DBUG_RETURN(0);
} /**** end of function red_slots ****/



/***************************** end of file rfstruct.c *************************/
@


1.10
log
@modified red_update and red_delete for use with tasm
don't use stacks
@
text
@d2 4
d35 1
a35 1
/* rfstruct.c                                                                */
d39 4
a42 1
/*    Functions for manipulation of frames                                   */
d44 3
a46 2
/*    FRAME functions :                                                      */
/*                -- external:  red_fselect, red_test, red_update            */
d52 9
a69 1
#include "rstack.h" /* stack macros for the processing phase */
a97 13
PTR_DESCRIPTOR  gen_id();                       /* forward declaration      */
PTR_DESCRIPTOR  gen_ind();                      /* forward declaration      */

/* generation scavenging (tg) */
STACKELEM _scav1, _scav2, _scav3;               /* members of scav work set */
#if    SCAVENGE
#define SCAV_GET(x,y) (x)
#define SCAV_SET(x,y) x = (y)
#else
#define SCAV_GET(x,y) (y)
#define SCAV_SET(x,y)
#endif /* SCAVENGE       RS 1.12.1992 */

d108 1
a108 1
int red_test(arg1,arg2)
d112 1
a112 1
  DBUG_ENTER ("red_test");
d114 1
a114 1
  START_MODUL("red_test");
d129 2
a130 2
            DEC_REFCNT((PTR_DESCRIPTOR)arg1);
            DEC_REFCNT((PTR_DESCRIPTOR)arg2);
d132 1
a132 1
            END_MODUL("red_test");
d137 2
a138 2
    DEC_REFCNT((PTR_DESCRIPTOR)arg1);
    DEC_REFCNT((PTR_DESCRIPTOR)arg2);
d140 1
a140 1
    END_MODUL("red_test");
d144 1
a144 1
  END_MODUL("red_test");
d159 1
a159 1
int red_fselect(arg1,arg2)
d163 1
a163 1
  DBUG_ENTER ("red_fselect");
d165 1
a165 1
  START_MODUL("red_fselect");
d181 2
a182 2
            DEC_REFCNT((PTR_DESCRIPTOR)arg1);
            DEC_REFCNT((PTR_DESCRIPTOR)arg2);
d184 1
a184 1
            END_MODUL("red_fselect");
d190 1
a190 1
  END_MODUL("red_fselect");
d207 1
a207 1
int red_update(arg1,arg2,arg3)
d211 1
a211 1
  DBUG_ENTER ("red_update");
d213 1
a213 1
  START_MODUL("red_update");
d240 4
d272 1
a272 1
        DEC_REFCNT((PTR_DESCRIPTOR)arg1);
d276 1
a276 1
    END_MODUL("red_update");
d281 1
a281 1
  END_MODUL("red_update");
a284 65
/* old version; uses W-Stack
int red_update(arg1,arg2,arg3)
register STACKELEM arg1,arg2,arg3;
{

  DBUG_ENTER ("red_update");

  START_MODUL("red_update");
  if (   (T_POINTER(arg1) && R_DESC(DESC(arg1),class) == C_FRAME
                          && R_DESC(DESC(arg1),type) == TY_FRAME)
      && (T_POINTER(arg2) && R_DESC(DESC(arg2),class) == C_LIST
                          && R_DESC(DESC(arg2),type) == TY_STRING))
  {
    int index,count=0,exists=FALSE;
    PTR_DESCRIPTOR newslot,slot;

    NEWDESC(newslot); TESTDESC(newslot);
    DESC_MASK(newslot,1,C_FRAME,TY_SLOT);
    L_SLOT(*newslot,name) = (PTR_DESCRIPTOR)arg2;
    L_SLOT(*newslot,value) = (T_HEAPELEM)arg3;

    NEWDESC(_desc); TEST_DESC;
    DESC_MASK(_desc,1,C_FRAME,TY_FRAME);

    count = (int) R_FRAME(DESC(arg1),dim);

    for(index=0; index < count ; index++)
    {
        slot = (PTR_DESCRIPTOR)(R_FRAME(DESC(arg1),slots)[index]); 
        if (str_eq(R_SLOT(*slot,name),(PTR_DESCRIPTOR)arg2))
        {
            exists = TRUE; 
            PUSH_W((STACKELEM)newslot);
        } 
        else 
        {
            INC_REFCNT(slot);
            PUSH_W((STACKELEM)slot);
        }
    }

    DEC_REFCNT((PTR_DESCRIPTOR)arg1);

    if (!exists)
    {
        count++;
        PUSH_W((STACKELEM)newslot);
    }

    L_FRAME(*_desc,dim) = count;
    NEWHEAP(R_FRAME(*_desc,dim),A_FRAME(*_desc,slots));

    for(index= (R_FRAME(*_desc,dim) - 1) ; index >= 0 ; index--)
    {
        L_FRAME(*_desc,slots)[index] = POP_W();
    }

    END_MODUL("red_update");
    DBUG_RETURN(2);

  }

  END_MODUL("red_update");
  DBUG_RETURN(0);
} */
d299 1
a299 1
int red_delete(arg1,arg2)
d303 1
a303 1
  DBUG_ENTER ("red_delete");
d305 1
a305 1
  START_MODUL("red_delete");
d323 2
d328 4
a331 2
        DEC_REFCNT((PTR_DESCRIPTOR)arg2);
        END_MODUL("red_delete");
d355 1
a355 2
        DEC_REFCNT((PTR_DESCRIPTOR)arg1);
        DEC_REFCNT((PTR_DESCRIPTOR)arg2);
d360 1
a360 1
    END_MODUL("red_delete");
d365 1
a365 1
  END_MODUL("red_delete");
a368 59
/* old version, uses W-Stack
int red_delete(arg1,arg2)
register STACKELEM arg1,arg2;
{

  DBUG_ENTER ("red_delete");

  START_MODUL("red_delete");
  if (   (T_POINTER(arg1) && R_DESC(DESC(arg1),class) == C_FRAME
                          && R_DESC(DESC(arg1),type) == TY_FRAME)
      && (T_POINTER(arg2) && R_DESC(DESC(arg2),class) == C_LIST
                          && R_DESC(DESC(arg2),type) == TY_STRING))
  {
    int index,dim,count=0;
    PTR_DESCRIPTOR slot;

    dim = (int) R_FRAME(DESC(arg1),dim);

    if (dim == 0)
    {
      _desc = (PTR_DESCRIPTOR)arg1;
      DEC_REFCNT((PTR_DESCRIPTOR)arg2);
      END_MODUL("red_delete");
      DBUG_RETURN(1);
    }

    for(index=0; index < dim ; index++)
    {
        slot = (PTR_DESCRIPTOR)(R_FRAME(DESC(arg1),slots)[index]); 
        if (!str_eq(R_SLOT(*slot,name),(PTR_DESCRIPTOR)arg2))
        {
          count++;
          INC_REFCNT(slot);
          PUSH_W(slot);
        }
    }

    DEC_REFCNT((PTR_DESCRIPTOR)arg1);
    DEC_REFCNT((PTR_DESCRIPTOR)arg2);

    NEWDESC(_desc); TEST_DESC;
    DESC_MASK(_desc,1,C_FRAME,TY_FRAME);
    L_FRAME(*_desc,dim) = count;
    NEWHEAP(R_FRAME(*_desc,dim),A_FRAME(*_desc,slots));

    for(index= (count-1); index >= 0; index--)
    {
        L_FRAME(*_desc,slots)[index] = (T_HEAPELEM)POP_W();
    }


    END_MODUL("red_delete");
    DBUG_RETURN(2);

  }

  END_MODUL("red_delete");
  DBUG_RETURN(0);
} */
d380 1
a380 1
int red_slots(arg1)
d384 1
a384 1
  DBUG_ENTER ("red_slots");
d386 1
a386 1
  START_MODUL("red_slots");
d397 1
a397 1
      DEC_REFCNT((PTR_DESCRIPTOR)arg1);
d399 2
a400 1
      END_MODUL("red_slots");
d421 1
a421 1
    DEC_REFCNT((PTR_DESCRIPTOR)arg1);
d423 1
a423 1
    END_MODUL("red_slots");
d428 1
a428 1
  END_MODUL("red_slots");
@


1.9
log
@use W as working stack :-)
@
text
@d2 3
d216 75
d321 1
a321 1
    if (!exists) /* add a new slot */
a334 2
/*    RES_HEAP; REL_HEAP; not used here */

d339 1
a339 1
  /* fail */
d342 2
a343 1
} /**** end of function red_update ****/
d369 68
a473 1
/*    RES_HEAP; REL_HEAP; not used here */
d479 1
a479 1
  /* fail */
d482 1
a482 1
} /**** end of function red_delete ****/
@


1.8
log
@including: rstack.h
@
text
@d2 3
d232 1
a232 1
            PUSH_A((STACKELEM)newslot);
d237 1
a237 1
            PUSH_A((STACKELEM)slot);
d246 1
a246 1
        PUSH_A((STACKELEM)newslot);
d254 1
a254 1
        L_FRAME(*_desc,slots)[index] = POP_A();
d312 1
a312 1
          PUSH_A(slot);
d326 1
a326 1
        L_FRAME(*_desc,slots)[index] = (T_HEAPELEM)POP_A();
@


1.7
log
@support for empty frames: NILSTRUCT
@
text
@d2 3
d47 1
d229 1
a229 1
            PUSHSTACK(S_a,(STACKELEM)newslot);
d234 1
a234 1
            PUSHSTACK(S_a,(STACKELEM)slot);
d243 1
a243 1
        PUSHSTACK(S_a,(STACKELEM)newslot);
d251 1
a251 1
        L_FRAME(*_desc,slots)[index] = POPSTACK(S_a);
d309 1
a309 1
          PUSHSTACK(S_a,slot);
d323 1
a323 1
        L_FRAME(*_desc,slots)[index] = (T_HEAPELEM)POPSTACK(S_a);
@


1.6
log
@two more operations on frames: FR_SLOTS,FR_DELETE
@
text
@d2 3
d285 1
a285 1
    int index,count=0;
d288 11
a298 1
    for(index=0; index < (int) R_FRAME(DESC(arg1),dim); index++)
d353 1
a353 1
    int index;
d356 11
d369 1
a369 1
    L_LIST(*_desc,dim) = R_FRAME(DESC(arg1),dim);
d374 1
a374 1
    for(index=0; index < (int) R_FRAME(DESC(arg1),dim); index++)
@


1.5
log
@no NEWDESC while RES_HEAP ..
@
text
@d2 3
d53 1
d189 1
a189 1
/* (slot won't be added if missing -> should be changed later)               */
d203 1
a203 1
    int index;
d206 5
d213 27
a239 1
    L_FRAME(*_desc,dim) = R_FRAME(DESC(arg1),dim);
d242 33
a274 2
    NEWDESC(newslot); TEST_DESC;
    DESC_MASK(newslot,1,C_FRAME,TY_SLOT);
d276 8
a283 1
    RES_HEAP;
d288 1
a288 1
        if (str_eq(R_SLOT(*slot,name),(PTR_DESCRIPTOR)arg2))
d290 3
a292 5
            slot = newslot;
            INC_REFCNT((PTR_DESCRIPTOR)arg2);
            if (T_POINTER(arg3)) INC_REFCNT((PTR_DESCRIPTOR)arg3);
            L_SLOT(*slot,name) = (PTR_DESCRIPTOR)arg2;
            L_SLOT(*slot,value) = (T_HEAPELEM)arg3;
d294 62
a355 2
        INC_REFCNT(slot);
        L_FRAME(*_desc,slots)[index] = (T_HEAPELEM)slot;
a358 1
    DEC_REFCNT(newslot);
a359 2
    DEC_REFCNT((PTR_DESCRIPTOR)arg2);
    if (T_POINTER(arg3)) DEC_REFCNT((PTR_DESCRIPTOR)arg3);
d361 1
a361 1
    END_MODUL("red_update");
d366 1
a366 1
  END_MODUL("red_update");
d368 2
a369 1
} /**** end of function red_update ****/
@


1.4
log
@chan..err.. changed nCUBE to D_SLAVE !
@
text
@d2 3
d200 1
a200 1
    PTR_DESCRIPTOR slot;
d206 4
d217 1
a217 2
            NEWDESC(slot); TEST_DESC;
            DESC_MASK(slot,1,C_FRAME,TY_SLOT);
d222 2
a223 2

        } else { INC_REFCNT(slot); }
d228 1
@


1.3
log
@bug fixed in red_update
@
text
@d2 3
d27 1
a27 1
#if nCUBE
@


1.2
log
@added red_test
@
text
@d1 4
a4 1
/* $Log: $ */
d214 2
a215 6
        }
        else
        {
            INC_REFCNT(slot);
            L_FRAME(DESC(arg1),slots)[index] = (T_HEAPELEM)slot;
        }
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* $Log: */
d68 51
@
