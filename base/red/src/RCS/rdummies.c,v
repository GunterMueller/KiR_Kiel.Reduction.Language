head	1.2;
access;
symbols
	continuation_based_interactions:1.2
	pre_interactions:1.2
	nCUBE~:1.2
	red2:1.2
	red1:1.1;
locks; strict;
comment	@ * @;


1.2
date	92.12.16.12.49.45;	author rs;	state Exp;
branches;
next	1.1;

1.1
date	92.11.04.18.12.30;	author base;	state Exp;
branches;
next	;


desc
@original
@


1.2
log
@ANSI-Version
@
text
@/* $Log: rdummies.c,v $
 * Revision 1.1  1992/11/04  18:12:30  base
 * Initial revision
 * */
/* rdummies.c */

#include <stdio.h>

/* dummy functions for wb's real functions */

/* TB, 2.11.1992 */
/* Typen und returns */
void loleila()    { return; }
void set_bp()     { return; }
void reset_bps()  { return; }
int get_table()  { return(0); }
int get_tablen() { return(0); }
/* end of TB */

#ifdef NotUsed
/* dummy main function */
main() {
  reduce();
  exit(1);
}
#endif /* NotUsed   auskommentiert RS 4.12.1992 */

#ifdef NotUsed
#if    SCAVENGE

extern char *malloc();

init_scavenge() {}
reinit_scavenge() {}

/***************************************************************************/

char *get_desc()
{
  register char *p;
  if (p = malloc(32)) {
    /* memalign macht's besser !!! */
    p = (char *)(((int)p + 15) & 0xffffff0); /* align to 16 byte boundary */
    return(p);
  }
  else
    post_mortem("get_desc: malloc failed");
}

/***************************************************************************/

char *get_heap(n,p)
unsigned long n, **p;
{
  if (*p = (unsigned long *)malloc(n * 4)) {
    return((char *)*p);
  }
  else
    post_mortem("get_heap: malloc failed");
  return(0);
}

/***************************************************************************/

char *get_buff(n)
unsigned n;
{
  register char *p;
  if (p = malloc(n * 4)) {
    return(p);
  }
  else
    post_mortem("get_buff: malloc failed");
}

#else

init_scavenge() {}
reinit_scavenge() {}

#endif /* SCAVENGE   auskommentiert RS 4.12.1992 */
#endif /* NotUsed    auskommentiert RS 4.12.1992 */

/* end of file */
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/* $Log$ */
d11 8
a18 5
loleila()    {}
set_bp()     {}
reset_bps()  {}
get_table()  { return(0); }
get_tablen() { return(0); }
d20 1
a20 1
#ifdef Not Used
d26 1
a26 1
#endif Not Used
d81 2
a82 2
#endif SCAVENGE
#endif NotUsed
@
