head	1.8;
access;
symbols;
locks; strict;
comment	@ * @;


1.8
date	95.06.14.15.11.00;	author car;	state Exp;
branches;
next	1.7;

1.7
date	95.04.24.06.48.20;	author car;	state Exp;
branches;
next	1.6;

1.6
date	95.04.04.07.26.00;	author car;	state Exp;
branches;
next	1.5;

1.5
date	95.03.21.15.19.26;	author car;	state Exp;
branches;
next	1.4;

1.4
date	95.03.09.10.26.58;	author car;	state Exp;
branches;
next	1.3;

1.3
date	95.02.10.17.16.00;	author car;	state Exp;
branches;
next	1.2;

1.2
date	94.12.27.14.46.23;	author car;	state Exp;
branches;
next	1.1;

1.1
date	94.12.20.07.30.57;	author car;	state Exp;
branches;
next	;


desc
@initial version
@


1.8
log
@new conditional handling
@
text
@#ifndef RIS_H
#define RIS_H

typedef enum { ST_A = 1, ST_R, ST_T, ST_W } stackid;

#define freeframe(s, c) if (refmode != SREFisexplicit)                          \
                          { int i;                                              \
                            for(i = 0; i < (int)top(s); i++)                    \
                            mkinc(c, (desc *)peek(s, i+1), ST_ ## s, i); }      \
                        drop(s, (int)top(s)+1);

typedef enum
  { null = 0, FSYNC, FSYNCMERGE, SYNC, SYNCMERGE, NOOP, CSYNC, CSYNCMERGE } doneid;

#endif /* RIS_H */
@


1.7
log
@keepimpl integrated
@
text
@d7 3
a9 2
                          for(i = 0; i < (int)top(s); i++)                      \
                            mkinc(c, (desc *)peek(s, i+1), ST_ ## s, i);        \
d13 1
a13 1
  { null = 0, then_done, else_done, cond_done, func_done, case_done } doneid;
@


1.6
log
@freeframe makro changed
@
text
@d6 3
a8 2
#define freeframe(s, c) for(i = 0; i < (int)top(s); i++)                        \
                          mkinc(c, (desc *)peek(s, i+1), ST_ ## s, i);        \
@


1.5
log
@PM
@
text
@d7 1
a7 1
                          mkinc(c, (desc *)peek(s, i+1), ST_ ## s, i-1);        \
@


1.4
log
@*** empty log message ***
@
text
@d10 2
a11 1
typedef enum { null = 0, then_done, else_done, cond_done, func_done } doneid;
@


1.3
log
@conditionals integrated
@
text
@d10 1
a10 1
typedef enum { then_done, else_done, cond_done, func_done } doneid;
@


1.2
log
@simple instructions (incl. beta) work
@
text
@d10 2
@


1.1
log
@Initial revision
@
text
@d4 6
@
