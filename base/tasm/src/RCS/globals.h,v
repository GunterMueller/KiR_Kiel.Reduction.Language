head	1.21;
access;
symbols;
locks; strict;
comment	@ * @;


1.21
date	97.02.18.14.46.39;	author stt;	state Exp;
branches;
next	1.20;

1.20
date	96.05.08.16.51.58;	author cr;	state Exp;
branches;
next	1.19;

1.19
date	96.03.13.12.45.48;	author stt;	state Exp;
branches;
next	1.18;

1.18
date	96.03.12.17.01.22;	author stt;	state Exp;
branches;
next	1.17;

1.17
date	96.02.15.16.52.23;	author cr;	state Exp;
branches;
next	1.16;

1.16
date	96.02.13.15.19.58;	author stt;	state Exp;
branches;
next	1.15;

1.15
date	95.07.11.10.56.33;	author sf;	state Exp;
branches;
next	1.14;

1.14
date	95.07.06.07.15.39;	author sf;	state Exp;
branches;
next	1.13;

1.13
date	95.06.20.16.58.44;	author sf;	state Exp;
branches;
next	1.12;

1.12
date	95.04.12.11.58.59;	author sf;	state Exp;
branches;
next	1.11;

1.11
date	95.04.12.11.56.18;	author sf;	state Exp;
branches;
next	1.10;

1.10
date	95.03.23.13.30.17;	author cr;	state Exp;
branches;
next	1.9;

1.9
date	95.03.22.17.48.27;	author cr;	state Exp;
branches;
next	1.8;

1.8
date	94.12.29.14.44.03;	author sf;	state Exp;
branches;
next	1.7;

1.7
date	94.12.02.09.14.17;	author sf;	state Exp;
branches;
next	1.6;

1.6
date	94.11.25.09.42.34;	author sf;	state Exp;
branches;
next	1.5;

1.5
date	94.11.25.08.57.21;	author sf;	state Exp;
branches;
next	1.4;

1.4
date	94.11.24.16.07.18;	author sf;	state Exp;
branches;
next	1.3;

1.3
date	94.11.21.12.59.24;	author sf;	state Exp;
branches;
next	1.2;

1.2
date	94.11.21.10.00.10;	author car;	state Exp;
branches;
next	1.1;

1.1
date	94.11.21.09.08.59;	author car;	state Exp;
branches;
next	;


desc
@initial incomplete version
@


1.21
log
@item ia_fscanf replaced by item ia_fredirect
@
text
@#ifndef __GLOBALS__
#define __GLOBALS__

#include "mytypes.h"
#include <stdlib.h>
#include <stdio.h>

CODE *code = NULL;
CODE first_ft = {"/* program automatically generated by tasm */\n",NULL}, 
        *functable = &first_ft;

CODE second_ft = {"/* table of closures for existing comb 'n' cond   */"
                    ,NULL}, *funcclostable = &second_ft;


  
/* DO NOT CHANGE THE ORDER OF THE PRIMFUNCTIONS, THEY'RE SORTED */ 
/* sf 21.11.94 */
char *primf_tab[]=
{
/*********************/
/* DYADIC FUNCTIONS  */
/*********************/
"D_PLUS",
"D_MINUS",
"D_MULT",
"D_DIV",
"D_MOD",
"D_OR",
"D_AND",
"D_XOR",
"D_EQ",
"D_NEQ",
"D_LESS",
"D_LEQ",
"D_GREAT",
"D_GEQ",
"D_MAX",
"D_MIN",
"D_QUOT",
/*********************/
/* MONADIC FUNCTIONS */
/*********************/
"M_NOT",
"M_ABS",
"M_NEG",
"M_TRUNCATE",
"M_FLOOR",
"M_CEIL",
"M_FRAC",
"M_EMPTY",
"M_SIN",
"M_COS",
"M_TAN",
"M_LN",
"M_EXP",
/*****************/
/* INNER PRODUCT */
/*****************/
"IP",
/***********/
/* QUERIES */
/***********/
"CLASS",
"TYPE",
"DIMENSION",
"VDIMENSION",
"MDIMENSION",
"LDIMENSION",
/***********/
/* GROUP 1 */
/***********/
"TRANSPOSE",
"REVERSE",
/***********/
/* GROUP 2 */
/***********/
"CUT",
"MCUT",
"VCUT",
"LTRANSFORM",
"ROTATE",
"VROTATE",
"MROTATE",
"SELECT",
"VSELECT",
"MSELECT",
"SUBSTR",
/************************_LGEN_UH**************/
"LCUT",
"TRANSFORM",
"LROTATE",
"LSELECT",
/************************_D_CONS***************/
/***********/
/* GROUP 3 */
/***********/
"LREPLACE",
"REPSTR",
"REPLACE",
"MREPLACE_C",
"MREPLACE_R",
"VREPLACE",
"MREPLACE",
/***********/
/* GROUP 4 */
/***********/
/************************UNI_VECT***************/
/***********/
/* GROUP 5 */
/***********/
/************************UNI_MATRIX***************/
/***********/
/* GROUP 6 */
/***********/
/************************UNI_TREE***************/
/***********/
/* GROUP 7 */
/***********/
"UNI",
"VUNI",
"MUNI",
"LUNI",
/************************/
/* CONVERSION FUNCTIONS */
/************************/
"TO_VECT",
"TO_TVECT",
"TO_MAT",
"TO_SCAL",
"TO_LIST",
"TO_FIELD",
/************************/
/* ALONG A COORDINATE   */
/************************/
"C_MAX",
"VC_MAX",
"C_MIN",
"VC_MIN",
"C_PLUS",
"VC_PLUS",
"C_MINUS",
"VC_MINUS",
"C_MULT",
"VC_MULT",
"C_DIV",
"VC_DIV",
/************************/
/* FIELD (NOT) EQUAL    */
/************************/
"F_EQ",
"F_NE",
/* cr 22/03/95, kir(ff), START */
/************************/
/* FRAME FUNCTIONS      */
/************************/
"FR_UPDATE",
"FR_SELECT",
"FR_TEST",
"FR_DELETE",
"FR_SLOTS",
/* cr 22/03/95, kir(ff), END */
"SPRINTF",
"SSCANF",
"TO_CHAR",
"TO_ORD"
};

char *opt_primf_tab[]=
{
/*********************/
/* DYADIC FUNCTIONS  */
/*********************/
"TA_PLUS(%s, %s)",
"TA_MINUS(%s, %s)",
"TA_MULT(%s, %s)",
"TA_DIV(%s, %s)",
"TA_MOD(%s, %s)",
"TA_OR(%s, %s)",
"TA_AND(%s, %s)",
"TA_XOR(%s, %s)",
"TA_EQ(%s, %s)",
"TA_NEQ(%s, %s)",
"TA_LESS(%s, %s)",
"TA_LEQ(%s, %s)",
"TA_GREAT(%s, %s)",
"TA_GEQ(%s, %s)",
"TA_MAX(%s, %s)",
"TA_MIN(%s, %s)",
"TA_QUOT(%s, %s)",
/*********************/
/* MONADIC FUNCTIONS */
/*********************/
"TA_NOT(%s)",
"TA_ABS(%s)",
"TA_NEG(%s)",
"TA_TRUNCATE(%s)",
"TA_FLOOR(%s)",
"TA_CEIL(%s)",
"TA_FRAC(%s)",
"TA_EMPTY(%s)",
"TA_SIN(%s)",
"TA_COS(%s)",
"TA_TAN(%s)",
"TA_LN(%s)",
"TA_EXP(%s)",
/*****************/
/* INNER PRODUCT */
/*****************/
"TA_IP(%s, %s)",
/***********/
/* QUERIES */
/***********/
"TA_CLASS(%s)",
"TA_TYPE(%s)",
"TA_DIMENSION(%s)",
"TA_VDIMENSION(%s)",
"TA_MDIMENSION(%s, %s)",
"TA_LDIMENSION(%s)",
/***********/
/* GROUP 1 */
/***********/
"TA_TRANSPOSE(%s)",
"TA_REVERSE(%s)",
/***********/
/* GROUP 2 */
/***********/
"TA_CUT(%s, %s, %s)",
"TA_MCUT(%s, %s, %s)",
"TA_VCUT(%s, %s)",
"TA_LTRANSFORM(%s, %s, %s)",
"TA_ROTATE(%s, %s, %s)",
"TA_VROTATE(%s, %s)",
"TA_MROTATE(%s, %s, %s)",
"TA_SELECT(%s, %s, %s)",
"TA_VSELECT(%s, %s)",
"TA_MSELECT(%s, %s, %s)",
"TA_SUBSTR(%s, %s, %s)",
/************************_LGEN_UH**************/
"TA_LCUT(%s, %s)",
"TA_TRANSFORM(%s)",
"TA_LROTATE(%s, %s)",
"TA_LSELECT(%s, %s)",
/************************_D_CONS***************/
/***********/
/* GROUP 3 */
/***********/
"TA_LREPLACE(%s, %s, %s)",
"TA_REPSTR(%s, %s, %s, %s)",
"TA_REPLACE(%s, %s, %s, %s)",
"TA_MREPLACE_C(%s, %s, %s)",
"TA_MREPLACE_R(%s, %s, %s)",
"TA_VREPLACE(%s, %s, %s)",
"TA_MREPLACE(%s, %s, %s, %s)",
/***********/
/* GROUP 4 */
/***********/
/************************UNI_VECT***************/
/***********/
/* GROUP 5 */
/***********/
/************************UNI_MATRIX***************/
/***********/
/* GROUP 6 */
/***********/
/************************UNI_TREE***************/
/***********/
/* GROUP 7 */
/***********/
"TA_UNI(%s, %s, %s)",
"TA_VUNI(%s, %s)",
"TA_MUNI(%s, %s, %s)",
"TA_LUNI(%s, %s)",
/************************/
/* CONVERSION FUNCTIONS */
/************************/
"TA_TO_VECT(%s)",
"TA_TO_TVECT(%s)",
"TA_TO_MAT(%s)",
"TA_TO_SCAL(%s)",
"TA_TO_LIST(%s)",
"TA_TO_FIELD(%s)",
/************************/
/* ALONG A COORDINATE   */
/************************/
"TA_C_MAX(%s, %s)",
"TA_VC_MAX(%s)",
"TA_C_MIN(%s, %s)",
"TA_VC_MIN(%s)",
"TA_C_PLUS(%s, %s)",
"TA_VC_PLUS(%s)",
"TA_C_MINUS(%s, %s)",
"TA_VC_MINUS(%s)",
"TA_C_MULT(%s, %s)",
"TA_VC_MULT(%s)",
"TA_C_DIV(%s, %s)",
"TA_VC_DIV(%s)",
/************************/
/* FIELD (NOT) EQUAL    */
/************************/
"TA_F_EQ(%s, %s)",
"TA_F_NE(%s, %s)",
/* cr 22/03/95, kir(ff), START */
/************************/
/* FRAME FUNCTIONS      */
/************************/
"TA_FR_UPDATE(%s, %s, %s)",
"TA_FR_SELECT(%s, %s)",
"TA_FR_TEST(%s, %s)",
"TA_FR_DELETE(%s, %s)",
"TA_FR_SLOTS(%s)",
/* cr 22/03/95, kir(ff), END */
"TA_SPRINTF(%s, %s)",
"TA_SSCANF(%s, %s)",
"TA_TO_CHAR(%s)",
"TA_TO_ORD(%s)"
};


/* stt 13.02.96 */
/* The elements of IACTION (mytypes.h) are used as indexes for intact_tab[]. */
/* Make sure that IACTION and intact_tab[] match each other.                 */
char *intact_tab[]=
{
"IA_FOPEN",
"IA_FCLOSE",
"IA_FGETC",
"IA_FPUTC",
"IA_UNGETC",
"IA_FGETS",
"IA_READ",
"IA_FPUTS",
"IA_FPRINTF",
"IA_FREDIRECT",
"IA_FSEEK",
"IA_FTELL",
"IA_EXIT",
"IA_EOF",
"IA_BIND",
"IA_UNIT",
"IA_FINFO",
"IA_STATUS",
"IA_REMOVE",
"IA_RENAME",
"IA_COPY",
"IA_MKDIR",
"IA_RMDIR",
"IA_CHDIR",
"IA_GETWD",
"IA_DIR",
"IA_GET",
"IA_PUT"
};

#endif
@


1.20
log
@new interactions: IA_GET, IA_PUT
@
text
@d334 1
a334 1
"IA_FSCANF",
@


1.19
log
@Comment added.
@
text
@d350 3
a352 1
"IA_DIR"
@


1.18
log
@SPRINTF, SSCANF, TO_CHAR, TO_ORD added.
@
text
@a319 1
/* DO NOT CHANGE THE ORDER OF THE INTERACTIONS, THEY'RE SORTED */
d321 2
@


1.17
log
@added FR_DELETE, FR_SLOTS
@
text
@d163 4
d313 4
@


1.16
log
@intact_tab[] added
@
text
@d160 2
d306 2
@


1.15
log
@mdim got two parameters
@
text
@d306 34
@


1.14
log
@vcut <-> mcut
@
text
@d212 1
a212 1
"TA_MDIMENSION(%s)",
@


1.13
log
@TA_IP(%s) -> TA_IP(%s, %s)
@
text
@d79 1
a80 1
"MCUT",
d223 1
a224 1
"TA_MCUT(%s, %s, %s)",
@


1.12
log
@*** empty log message ***
@
text
@d204 1
a204 1
"TA_IP(%s)",
@


1.11
log
@opt_primf_tab[] inserted
@
text
@d191 1
a191 1
"TA_TRUNCATE"(%s),
@


1.10
log
@renamed: F_UPDATE,F_SELECT,F_TEST to FR_UPDATE,FR_SELECT,FR_TEST
(to avoid name clash with gcclib/.../includes/...)
@
text
@d163 143
a305 1

@


1.9
log
@added F_UPDATE,F_SELECT,F_TEST to primf_tab
@
text
@d157 3
a159 3
"F_UPDATE",
"F_SELECT",
"F_TEST",
@


1.8
log
@minor change
@
text
@d153 8
@


1.7
log
@funcclostable inserted
@
text
@d9 2
a10 2
CODE first_ft = {"/* program automatically generated by tasm */\n\
#include \"prolog.h\"",NULL}, *functable = &first_ft;
@


1.6
log
@funcdesctable included
@
text
@d12 2
a13 2
CODE second_ft = {"/* table of names of existing FUNC and CONDI desc */"
                    ,NULL}, *funcnametable = &second_ft;
a14 5
CODE third_ft = {"/* table of addresses of existing FUNC and CONDI desc */"
                    ,NULL}, *funcadrtable = &third_ft;

CODE forth_ft = {"/* table of addresses of existing FUNC and CONDI desc */"
                    ,NULL}, *funcdesctable = &forth_ft;
@


1.5
log
@addresses of functions and conditionals in C-file in funcadrtable
@
text
@d18 3
@


1.4
log
@funcnametable inserted / contains names of funcs and conds in the same order
as in functable
@
text
@d15 3
@


1.3
log
@primf_tab jetzt nur noch aus Strings bestehend
@
text
@d10 1
a10 1
#include \"prolog.h\"",NULL},*functable = &first_ft;
d12 4
@


1.2
log
@initial incomplete version
@
text
@d11 4
a14 6
struct PRIMF_TAB 
{
  PRIMF primf;
  char *pf;
}
primf_tab[]=
d19 17
a35 17
{p_plus,"D_PLUS"},
{p_minus,"D_MINUS"},
{p_mult,"D_MULT"},
{p_div,"D_DIV"},
{p_mod,"D_MOD"},
{p_or,"D_OR"},
{p_and,"D_AND"},
{p_xor,"D_XOR"},
{p_eq,"D_EQ"},
{p_ne,"D_NEQ"},
{p_lt,"D_LESS"},
{p_le,"D_LEQ"},
{p_gt,"D_GREAT"},
{p_ge,"D_GEQ"},
{p_max,"D_MAX"},
{p_min,"D_MIN"},
{p_quot,"D_QUOT"},
d39 13
a51 13
{p_not,"M_NOT"},
{p_abs,"M_ABS"},
{p_neg,"M_NEG"},
{p_trunc,"M_TRUNCATE"},
{p_floor,"M_FLOOR"},
{p_ceil,"M_CEIL"},
{p_frac,"M_FRAC"},
{p_empty,"M_EMPTY"},
{p_sin,"M_SIN"},
{p_cos,"M_COS"},
{p_tan,"M_TAN"},
{p_ln,"M_LN"},
{p_exp,"M_EXP"},
d55 1
a55 1
{p_ip,"IP"},
d59 6
a64 6
{p_class,"CLASS"},
{p_type,"TYPE"},
{p_dim,"DIMENSION"},
{p_vdim,"VDIMENSION"},
{p_mdim,"MDIMENSION"},
{p_ldim,"LDIMENSION"},
d68 2
a69 2
{p_transpose,"TRANSPOSE"},
{p_reverse,"REVERSE"},
d73 11
a83 11
{p_cut,"CUT"},
{p_vcut,"VCUT"},
{p_vcut,"MCUT"},
{p_ltransform,"LTRANSFORM"},
{p_rotate,"ROTATE"},
{p_vrotate,"VROTATE"},
{p_mrotate,"MROTATE"},
{p_select,"SELECT"},
{p_vselect,"VSELECT"},
{p_mselect,"MSELECT"},
{p_substruct,"SUBSTR"},
d85 4
a88 4
{p_lcut,"LCUT"},
{p_transform,"TRANSFORM"},
{p_lrotate,"LROTATE"},
{p_lselect,"LSELECT"},
d93 7
a99 7
{p_lreplace,"LREPLACE"},
{p_repstr,"REPSTR"},
{p_replace,"REPLACE"},
{p_mre_c,"MREPLACE_C"},
{p_mre_r,"MREPLACE_R"},
{p_vreplace,"VREPLACE"},
{p_mreplace,"MREPLACE"},
d115 4
a118 4
{p_unite,"UNI"},
{p_vunite,"VUNI"},
{p_munite,"MUNI"},
{p_lunite,"LUNI"},
d122 6
a127 6
{p_to_vect,"TO_VECT"},
{p_to_tvect,"TO_TVECT"},
{p_to_mat,"TO_MAT"},
{p_to_scal,"TO_SCAL"},
{p_to_list,"TO_LIST"},
{p_to_field,"TO_FIELD"},
d131 12
a142 12
{p_c_max,"C_MAX"},
{p_vc_max,"VC_MAX"},
{p_c_min,"C_MIN"},
{p_vc_min,"VC_MIN"},
{p_c_plus,"C_PLUS"},
{p_vc_plus,"VC_PLUS"},
{p_c_minus,"C_MINUS"},
{p_vc_minus,"VC_MINUS"},
{p_c_mult,"C_MULT"},
{p_vc_mult,"VC_MULT"},
{p_c_div,"C_DIV"},
{p_vc_div,"VC_DIV"},
d146 2
a147 2
{p_f_eq,"F_EQ"},
{p_f_ne,"F_NE"},
a149 1
int ANZAHL_PRIMF=67;
@


1.1
log
@Initial revision
@
text
@d135 1
a135 1
{p_c_min,"C_MIN"},x
@
