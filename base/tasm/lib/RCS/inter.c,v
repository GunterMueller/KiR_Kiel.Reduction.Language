head	1.6;
access;
symbols;
locks; strict;
comment	@ * @;


1.6
date	96.02.08.16.28.44;	author sf;	state Exp;
branches;
next	1.5;

1.5
date	96.02.05.10.30.03;	author sf;	state Exp;
branches;
next	1.4;

1.4
date	96.01.26.17.33.06;	author car;	state Exp;
branches;
next	1.3;

1.3
date	95.06.28.12.20.13;	author sf;	state Exp;
branches;
next	1.2;

1.2
date	95.04.05.15.18.02;	author cr;	state Exp;
branches;
next	1.1;

1.1
date	95.03.29.15.22.13;	author cr;	state Exp;
branches;
next	;


desc
@Interpreter for interactions
@


1.6
log
@DBUG_ENTER inserted
@
text
@#if !D_SLAVE
#include <sys/ioctl.h>
#endif
#include <string.h>
#define PROLOG_EXTERN
#include "prolog.h"

extern PTR_DESCRIPTOR funcdesctable[];
#define DESC(x)  (* (PTR_DESCRIPTOR) x)

#define TEST_DESC {if (_desc == NULL) post_mortem("_desc = 0");} 
#define NEWHEAP(size,adr)  {if (newheap(size,adr) == NULL) \
                              post_mortem("NEWHEAP failed");}

#ifdef __sparc__
#ifndef NO_STACK_REG
  register int *st_h asm ("g5");
  register int *st_w asm ("g7");
  register int *st_a asm ("g6");
#endif
#else
  extern int *st_h;
  extern int *st_w;
  extern int *st_a;
#endif

extern PTR_DESCRIPTOR _desc;
extern int inter_allowed;
extern int red_cnt;


int interactions();
PTR_DESCRIPTOR buildString(char *string);

/************************************************************/
/*                 interactions                             */ 
/************************************************************/
/* Handles Interaction Descriptors.                         */
/* (to be called in between pro- and postprocessing,        */
/*  i.e. in ext() before t_output; will either perform the  */
/*  requested interaction and return to processing with a   */
/*  newly constructed application, terminate the current    */
/*  process if the requested interaction is TY_DONE         */
/*  or simply do nothing if no interaction is requested     */
/*  or none is possible)                                    */
/*                                                          */ 
/* inspects and possibly changes top of stack w             */
/* may change stack contents and perform an apply           */ 
/************************************************************/

int interactions()
{
#if !D_SLAVE
  int topW = top(w);

  DBUG_ENTER("interactions");
  pop(r);
  if (T_POINTER(topW) && inter_allowed && red_cnt 
      && (C_INTER == R_DESC(DESC(topW),class)))
  {
    switch(R_DESC(DESC(topW),type))
    {
      case TY_PUT: 
        {   int goal,obj,cont,*ptc,ch=0;

            if (R_INTER(DESC(topW),dim) != 3) break;

            goal = ((int *)R_INTER(DESC(topW),args))[0];
            obj  = ((int *)R_INTER(DESC(topW),args))[1];
            cont = ((int *)R_INTER(DESC(topW),args))[2];

            if (T_POINTER(goal) && (R_DESC(DESC(goal),class)==C_LIST) 
                                && (R_DESC(DESC(goal),type)==TY_STRING)
                && T_POINTER(obj) && (R_DESC(DESC(obj),class)==C_LIST) 
                                  && (R_DESC(DESC(obj),type)==TY_STRING) )
            {
                if (R_LIST(DESC(goal),dim)==6 &&
                    cmpString((PTR_DESCRIPTOR)goal,"stdout"))
                {
                  int i;

                  ptc = R_LIST(DESC(obj),ptdv);
                  for(i = 0; i < (int)R_LIST(DESC(obj),dim); i++)
                  {
                    ch = fputc((char)GET_CHAR(ptc[i]),stdout);
                  }
                  fflush(stdout);
                  
                  push((int)buildString(( (ch==EOF) ? "EOF" : "success")) );
                  push(cont);
                  ap(1,0,&interactions);
                }
            }
            break;
        }
      case TY_GET: 
        {   int source,cont,c;
            char ch[]="0";

            if (R_INTER(DESC(topW),dim) != 2) break;

            source = ((int *)R_INTER(DESC(topW),args))[0];
            cont   = ((int *)R_INTER(DESC(topW),args))[1];

            if (T_POINTER(source) && (R_DESC(DESC(source),class)==C_LIST) 
                                  && (R_DESC(DESC(source),type)==TY_STRING))
            {
                if (R_LIST(DESC(source),dim)==5 &&
                    cmpString((PTR_DESCRIPTOR)source,"stdin"))
                {
                  struct sgttyb sgo,sgn;

                  ioctl(0, TIOCGETP, &sgo);
                  sgn = sgo;
                  sgn.sg_flags &= ~ECHO;
                  sgn.sg_flags |= CBREAK;
                  ioctl(0, TIOCSETP, &sgn);

                  if ((c = fgetc(stdin)) != EOF) ch[0] = c;

                  ioctl(0, TIOCSETP, &sgo);

                  push((int)buildString(( (c==EOF) ? "EOF" : ch )));
                  push(cont);
                  ap(1,1,&interactions);
                }
            }
            break;
        }
      case TY_DONE: 
        fprintf(stdout,"bye\n");
        exit(0);
        break;
    }
  }
#endif /* D_SLAVE */
  return((int)NULL);
}

BOOLEAN cmpString(PTR_DESCRIPTOR ptd,char *string)
{
  int i,*ptc,dim = strlen(string);

  DBUG_ENTER("cmpString");

  if (R_LIST(*ptd,dim) != dim) DBUG_RETURN(FALSE);

  RES_HEAP;
  ptc = R_LIST(*ptd,ptdv);
  for( i=0; i<dim; i++ ) 
  { 
    if (ptc[i] != MAKE_CHAR( string[i] )) DBUG_RETURN(FALSE); 
  }
  REL_HEAP;

  DBUG_RETURN(TRUE);
}

PTR_DESCRIPTOR buildString(char *string)
{
  int i,*ptc,dim = strlen(string);

  DBUG_ENTER("buildString");

  NEWDESC(_desc); TEST_DESC;
  LI_DESC_MASK(_desc,1,C_LIST,TY_STRING);
  L_LIST(*_desc,dim) = dim;
  NEWHEAP(dim,A_LIST(*_desc,ptdv));
  RES_HEAP;
  ptc = R_LIST(*_desc,ptdv);
  for( i=0; i<dim; i++ ) { ptc[i] = MAKE_CHAR( string[i] ); }
  REL_HEAP;

  DBUG_RETURN(_desc);
}
@


1.5
log
@/* #include <ioctl.h> */ -> #if !D_SLAVE #include <ioctl.h> #endif
@
text
@d56 1
@


1.4
log
@D_SLAVE deactivation
@
text
@d1 1
a1 1
/*
d3 1
a3 1
*/
@


1.3
log
@one more indirection in the descriptor table funcdesctable
which is now called stat_funcdesctable
funcdesctable is now an array of pointers to descriptors
@
text
@d1 1
d3 1
d53 1
d82 1
a82 1
                  for(i=0; i<R_LIST(DESC(obj),dim); i++)
a132 1
      default:
d135 1
@


1.2
log
@ignore unboxed values in interactions
@
text
@d6 1
a6 1
extern T_DESCRIPTOR funcdesctable[];
@


1.1
log
@Initial revision
@
text
@d54 2
a55 1
  if (inter_allowed && red_cnt && (C_INTER == R_DESC(DESC(topW),class)))
@
