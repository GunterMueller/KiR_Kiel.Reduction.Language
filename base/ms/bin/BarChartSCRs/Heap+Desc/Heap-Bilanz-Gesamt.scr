DEFS:
	static double size, timeFactor, previousTime;
	static char rememberFile[100], rememberTime[100], rememberSteps[100],
	            rememberFactor[100], temp[1000];

	#define MAX_ALLOCS 10000
	#define RATE 1                       /* Plot only each RATE-th point */

	static int rateCounter;

	static struct {
		int size, reference;
	} refs[MAX_ALLOCS];
	static int numRefs, i;


	void addXY(x, y)
	double x, y;
	{
		if(++rateCounter >= RATE) {
			rateCounter = 0;
			previousTime = x;
			ADD_XY(x, y);
			NEXT_FRAME();
		}

		return;
	}


	int isInRefs(ref)
	int ref;
	{
		int i;

		for(i=0; i<numRefs; ++i) {
			if(refs[i].reference == ref) {
				return(i);
			}
		}

		return(-1);
	}


BEGIN:
	size = 0;

	SET_MODE(XY_PLOT);

	HEADER_FILE(rememberFile);
	HEADER_TIME(rememberTime);
	HEADER_STEPS(rememberSteps);
	HEADER_FACTOR(rememberFactor);
	sprintf(temp, "Heap -- %s -- %s reduction steps",
	        rememberFile, rememberSteps);
	SET_TITLE(temp);

	timeFactor = atof(rememberFactor);

	SET_NAME("Heap");
	SET_X_LABEL("Time");
	SET_Y_LABEL("Total size of allocated HEAP-Blocks");
	SET_X_GRID(OFF);
	SET_Y_GRID(OFF);
	SET_STYLE(STEPS);
	SET_MARKER(SOLID);

	for(i=0; i<MAX_ALLOCS; ++i) {
		refs[i].reference = 0;
	}
	numRefs = 0;

	rateCounter = 0;

	NEXT_FRAME();

	break;

HEAP_ALLOC:
	/* Store size... */
	if((i = isInRefs(HA_REF)) == -1) {
		refs[numRefs].reference = HA_REF;
		refs[numRefs].size = HA_SIZE;
		++numRefs;
	} else {
		refs[i].size = HA_SIZE;
	}

	addXY(((double)TIME)/timeFactor, size += HA_SIZE);
	break;

HEAP_FREE:
	addXY(((double)TIME)/timeFactor,
	      size -= refs[isInRefs(HF_REF)].size);
	break;

END:
	/* Force last point to be drawn... */
	rateCounter = RATE;
	addXY(previousTime, size);

	NEXT_FRAME();
	break;
