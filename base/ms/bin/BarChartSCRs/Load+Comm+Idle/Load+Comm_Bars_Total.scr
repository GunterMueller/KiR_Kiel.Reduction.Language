DEFS:
	static struct {
		double since;
		double activeTime;
		int isActive, wasActive;
	} status[MAX_PROCESSORS];
	static double startTime, actualTime;

	static int i, numProcessors;
	static char rememberFile[100], rememberTime[100], rememberSteps[100],
	            rememberDimension[100], temp[1000];

	updateAll()
	{
		double totalTime = actualTime-startTime;

		if(totalTime > 0.0) {
			for(i=0; i<numProcessors; ++i) {
				SET_HEIGHT(i+1,
				           (status[i].activeTime +
				            (status[i].isActive ? 
				             actualTime-status[i].since :
				                                   /* active */
				             0))               /* not active */
				           *100/totalTime);
			}
		} else {
			for(i=0; i<numProcessors; ++i) {
				SET_HEIGHT(i+1, 0.0);
			}
		}
		SET_HEIGHT(numProcessors+1, 0.0);

		return;
	}


BEGIN:
	SET_MODE(BAR_CHART);

	HEADER_DIMENSION(rememberDimension);
	numProcessors = (1 << atoi(rememberDimension));

	HEADER_FILE(rememberFile);
	HEADER_TIME(rememberTime);
	HEADER_STEPS(rememberSteps);
	sprintf(temp, "Load-Balance -- %s -- %s reduction steps",
	        rememberFile, rememberSteps);
	SET_TITLE(temp);

	SET_NAME("Communication");
	SET_X_LABEL("Processor");
	SET_Y_LABEL("%");
	SET_X_GRID(OFF);
	SET_Y_GRID(OFF);

	for(i=0; i<=numProcessors; ++i) {
		sprintf(temp, "%d", i);
		CREATE_BAR(temp, i+1);
		/*CREATE_BAR("");*/
	}

	NEXT_FRAME();

	for(i=0; i<numProcessors; ++i) {
		status[i].activeTime = 0.0;
		status[i].isActive = 0;
	}
	startTime = actualTime = 0.0;

	break;

PROC_RUN:
	if(startTime == 0.0) {
		startTime = TIME;
	}
	actualTime = TIME;

	status[PROCESSOR].since = TIME;
	status[PROCESSOR].isActive = 1;

	updateAll();
	NEXT_FRAME();
	break;

SEND_BEGIN:
RECEIVE_BEGIN:
	if(startTime == 0.0) {
		startTime = TIME;
	}
	actualTime = TIME;

	if(status[PROCESSOR].isActive) {
		status[PROCESSOR].wasActive = 1;
	} else {
		status[PROCESSOR].wasActive = 0;

		status[PROCESSOR].since = TIME;
		status[PROCESSOR].isActive = 1;
	}
	updateAll();

	NEXT_FRAME();
	break;

PROC_SLEEP:
PROC_TERMINATE:
	actualTime = TIME;

	if(status[PROCESSOR].isActive) {
		status[PROCESSOR].activeTime += (TIME-status[PROCESSOR].since);
		status[PROCESSOR].isActive = 0;

		updateAll();
	}
	NEXT_FRAME();
	break;

SEND_END:
RECEIVE_END:
	actualTime = TIME;

	if(!status[PROCESSOR].wasActive) {
		status[PROCESSOR].activeTime += (TIME-status[PROCESSOR].since);
		status[PROCESSOR].isActive = 0;
	}
	updateAll();

	NEXT_FRAME();
	break;

END:
	NEXT_FRAME();
	break;
