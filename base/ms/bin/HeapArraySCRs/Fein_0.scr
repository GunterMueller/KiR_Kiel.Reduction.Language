DEFS:
	static char rememberFile[100], rememberTime[100], rememberSteps[100],
	            rememberHeapsize[100], rememberHeapdes[100], temp[1000];
	static int heapsize, heapdes;

	#define DESC_SIZE 16
	#define NUM_PROCESSORS 1
	#define NUM_FRAGS_X 48
	#define NUM_FRAGS_Y 250
	#define Y_GAP_SIZE 0
	#define NUM_FRAGS NUM_FRAGS_Y * NUM_FRAGS_X
	#define NUM_BLOCKS 10000

	static int i, j, k, heapBases[NUM_PROCESSORS];

	static struct {
		int size, address, reference;
	} blockSizes[NUM_PROCESSORS][NUM_BLOCKS];
	static int numBlockSizes[NUM_PROCESSORS];


	int blockSize(processor, reference)
	int processor, reference;
	{
		int i;

		for(i=0; i<numBlockSizes[processor]; ++i) {
			if(blockSizes[processor][i].reference == reference) {
				return(i);
			}
		}

		return(-1);
	}


	int computeSize(s)
	int s;
	{
		return((int)(NUM_FRAGS * (double)s/(double)heapsize) + 1);
	}


	int computeFrag(p, a)          /* Compute fragment from heap address */
	int p, a;
	{
		return((int)((((double)(a-heapBases[p]))/
		              (double)heapsize)*
		             NUM_FRAGS));
	}


	void fill(processor, address, size, color)
	int processor, address, size, color;
	{
		int i, j, k, x, y;

		j = computeFrag(processor, address);
		k = computeSize(size);

		for(i=j; i < j+k; ++i) {
			x = (i % NUM_FRAGS_X);
			y = (processor * (NUM_FRAGS_Y + Y_GAP_SIZE)) +
			    (i / NUM_FRAGS_X);
			FILL_BLOCK(y, x, color);
		}

		x = (j % NUM_FRAGS_X);
		y = (processor * (NUM_FRAGS_Y + Y_GAP_SIZE)) +
		    (j / NUM_FRAGS_X);
		DRAW_FRAGMENTATION(y, x);

		return;
	}


BEGIN:
	/* Colors for "Heapblock", "Descriptor" and "Available" */
	SET_COLORS(LIGHT_RED, LIGHT_YELLOW, GREEN);

	HEADER_FILE(rememberFile);
	HEADER_TIME(rememberTime);
	HEADER_STEPS(rememberSteps);
	sprintf(temp, "%s (%s) -- %s reduction steps",
	        rememberFile, rememberTime, rememberSteps);
	SET_TITLE(temp);

	HEADER_HEAPSIZE(rememberHeapsize);
	heapsize = atoi(rememberHeapsize);
	HEADER_HEAPDES(rememberHeapdes);
	heapdes = atoi(rememberHeapdes);

	/*SET_CACHING(OFF);
	SET_STACKING(OFF);
	SET_SEPARATION(OFF);*/
	SET_DIMENSIONS(NUM_PROCESSORS * (NUM_FRAGS_Y + Y_GAP_SIZE),
	               NUM_FRAGS_X);
	FILL_ALL(FREE);    /* Initialize "memory area"; Only allowed here!!! */

	for(i=0; i<NUM_PROCESSORS; ++i) {
		heapBases[i] = GET_HEAPBASE(i);
		numBlockSizes[i] = 0;
	}

	NEXT_FRAME();
	break;

DESC_ALLOC:
	if(!PROCESSOR) {
		fill(PROCESSOR, DA_ADR, DESC_SIZE, DESCRIPTOR);
		NEXT_FRAME();
	}
	break;

DESC_FREE:
	if(!PROCESSOR) {
		fill(PROCESSOR, DF_ADR, DESC_SIZE, FREE);
		NEXT_FRAME();
	}
	break;

HEAP_ALLOC:
	if(!PROCESSOR) {
		if((j = blockSize(PROCESSOR, HA_REF)) == -1) {
			blockSizes[PROCESSOR]
			          [numBlockSizes[PROCESSOR]].size = HA_SIZE;
			blockSizes[PROCESSOR]
			          [numBlockSizes[PROCESSOR]].address = HA_ADR;
			blockSizes[PROCESSOR]
			          [numBlockSizes[PROCESSOR]].reference = HA_REF;
			++numBlockSizes[PROCESSOR];
		} else {
			blockSizes[PROCESSOR][j].size = HA_SIZE;
			blockSizes[PROCESSOR][j].address = HA_ADR;
		}

		fill(PROCESSOR, HA_ADR, HA_SIZE, HEAPBLOCK);
		NEXT_FRAME();
	}
	break;

HEAP_FREE:
	if(!PROCESSOR) {
		if((i = blockSize(PROCESSOR, HF_REF)) != -1) {
			fill(PROCESSOR, 
			     blockSizes[PROCESSOR][i].address, 
			     blockSizes[PROCESSOR][i].size, FREE);
		} else {
			printf("!!! --> %lf\n", TIME);
		}
		NEXT_FRAME();
	}
	break;

END:
	NEXT_FRAME();
	break;


