/* some measure-macros

   This file is automatically generated
   DO NOT EDIT BELOW ! */

#ifndef _d_mess_groups
#define _d_mess_groups

extern char *mess_names[]; /* names */
extern char d_bitmask[]; /* bitmask (?!) */

#define D_M_CHECK(nr) (d_bitmask[nr] == '1')

/* this is no measure point */
#ifndef M_BINARY
#define MPRINT_SPECIAL(F, TIME, PROC, PID, NR, BASE) \
	fprintf(F, "%.lf %d %d SPECIAL %d %d\n", TIME, PROC, PID, NR, BASE)
#else
#define MPRINT_SPECIAL(F, TIME, PROC, PID, NR, BASE) \
        M_TIMER_TYPE_BUF = TIME, fwrite(&M_TIMER_TYPE_BUF, sizeof(M_TIMER_TYPE), 1, F), \
        M_BINARY_COUNT = sizeof(PROCESS_NR_TYPE) + sizeof(PROCESS_PID_TYPE) + sizeof(M_CHAR_BUF) + sizeof(M_INT_BUF) + sizeof(M_INT_BUF), \
        fwrite(&M_BINARY_COUNT, sizeof(M_BINARY_COUNT_TYPE), 1, F), \
        PROCESS_NR_BUF = PROC, fwrite(&PROCESS_NR_BUF, sizeof(PROCESS_NR_TYPE), 1, F), \
        PROCESS_PID_BUF = M_SWAP(PID), fwrite(&PROCESS_PID_BUF, sizeof(PROCESS_PID_TYPE), 1, F), \
        M_CHAR_BUF = 0; fwrite(&M_CHAR_BUF, sizeof(M_CHAR_BUF), 1, F), \
        M_INT_BUF = M_SWAP(NR), fwrite(&M_INT_BUF, sizeof(M_INT_BUF), 1, F), \
        M_INT_BUF = M_SWAP(BASE), fwrite(&M_INT_BUF, sizeof(M_INT_BUF), 1, F)
#endif

#define MPRINT_ASCII_COUNT(F, TIME, PROC, PID, NR) \
	fprintf(F, "%.lf %d %d %s\n", TIME, PROC, PID, mess_names[NR])
#define MPRINT_BINARY_COUNT(F, TIME, PROC, PID, NR) \
	M_TIMER_TYPE_BUF = TIME, fwrite(&M_TIMER_TYPE_BUF, sizeof(M_TIMER_TYPE), 1, F), \
        M_BINARY_COUNT = sizeof(PROCESS_NR_TYPE) + sizeof(PROCESS_PID_TYPE) + sizeof(M_CHAR_BUF), \
	fwrite(&M_BINARY_COUNT, sizeof(M_BINARY_COUNT_TYPE), 1, F), \
	PROCESS_NR_BUF = PROC, fwrite(&PROCESS_NR_BUF, sizeof(PROCESS_NR_TYPE), 1, F), \
	PROCESS_PID_BUF = M_SWAP(PID), fwrite(&PROCESS_PID_BUF, sizeof(PROCESS_PID_TYPE), 1, F), \
	M_CHAR_BUF = NR, fwrite(&M_CHAR_BUF, sizeof(M_CHAR_BUF), 1, F)
#ifndef M_BINARY
#define MPRINT_COUNT(F, TIME, PROC, PID, NAME) \
	MPRINT_ASCII_COUNT(F, TIME, PROC, PID, NAME)
#else
#define MPRINT_COUNT(F, TIME, PROC, PID, NAME) \
	MPRINT_BINARY_COUNT(F, TIME, PROC, PID, NAME)
#endif

#define MINDEX_HEAP_ALLOC 1
#define D_M_C_HEAP_ALLOC D_M_CHECK(1)
#define MPRINT_ASCII_HEAP_ALLOC(F, TIME, PROC, PID, HA_SIZE, HA_ADR, HA_REF) \
	fprintf(F, "%.lf %d %d HEAP_ALLOC %d %d %d\n", TIME, PROC, PID, HA_SIZE, HA_ADR, HA_REF)
#define MPRINT_BINARY_HEAP_ALLOC(F, TIME, PROC, PID, HA_SIZE, HA_ADR, HA_REF) \
	M_TIMER_TYPE_BUF = TIME, fwrite(&M_TIMER_TYPE_BUF, sizeof(M_TIMER_TYPE), 1, F), \
	M_BINARY_COUNT = sizeof(PROCESS_NR_TYPE) + sizeof(PROCESS_PID_TYPE) + sizeof(M_CHAR_BUF) + sizeof(M_INT_BUF) + sizeof(M_INT_BUF) + sizeof(M_INT_BUF), \
	fwrite(&M_BINARY_COUNT, sizeof(M_BINARY_COUNT_TYPE), 1, F), \
	PROCESS_NR_BUF = PROC, fwrite(&PROCESS_NR_BUF, sizeof(PROCESS_NR_TYPE), 1, F), \
	PROCESS_PID_BUF = M_SWAP(PID), fwrite(&PROCESS_PID_BUF, sizeof(PROCESS_PID_TYPE), 1, F), \
	M_CHAR_BUF = MINDEX_HEAP_ALLOC, fwrite(&M_CHAR_BUF, sizeof(M_CHAR_BUF), 1, F), \
	M_INT_BUF = M_SWAP(HA_SIZE), fwrite(&M_INT_BUF, sizeof(M_INT_BUF), 1, F), \
	M_INT_BUF = M_SWAP(HA_ADR), fwrite(&M_INT_BUF, sizeof(M_INT_BUF), 1, F), \
	M_INT_BUF = M_SWAP(HA_REF), fwrite(&M_INT_BUF, sizeof(M_INT_BUF), 1, F), \
	1
#ifdef M_BINARY
#define MPRINT_HEAP_ALLOC(F, TIME, PROC, PID, HA_SIZE, HA_ADR, HA_REF) \
	MPRINT_BINARY_HEAP_ALLOC(F, TIME, PROC, PID, HA_SIZE, HA_ADR, HA_REF)
#else
#define MPRINT_HEAP_ALLOC(F, TIME, PROC, PID, HA_SIZE, HA_ADR, HA_REF) \
	MPRINT_ASCII_HEAP_ALLOC(F, TIME, PROC, PID, HA_SIZE, HA_ADR, HA_REF)
#endif

#define MINDEX_HEAP_FREE 2
#define D_M_C_HEAP_FREE D_M_CHECK(2)
#define MPRINT_ASCII_HEAP_FREE(F, TIME, PROC, PID, HF_ADR, HF_REF) \
	fprintf(F, "%.lf %d %d HEAP_FREE %d %d\n", TIME, PROC, PID, HF_ADR, HF_REF)
#define MPRINT_BINARY_HEAP_FREE(F, TIME, PROC, PID, HF_ADR, HF_REF) \
	M_TIMER_TYPE_BUF = TIME, fwrite(&M_TIMER_TYPE_BUF, sizeof(M_TIMER_TYPE), 1, F), \
	M_BINARY_COUNT = sizeof(PROCESS_NR_TYPE) + sizeof(PROCESS_PID_TYPE) + sizeof(M_CHAR_BUF) + sizeof(M_INT_BUF) + sizeof(M_INT_BUF), \
	fwrite(&M_BINARY_COUNT, sizeof(M_BINARY_COUNT_TYPE), 1, F), \
	PROCESS_NR_BUF = PROC, fwrite(&PROCESS_NR_BUF, sizeof(PROCESS_NR_TYPE), 1, F), \
	PROCESS_PID_BUF = M_SWAP(PID), fwrite(&PROCESS_PID_BUF, sizeof(PROCESS_PID_TYPE), 1, F), \
	M_CHAR_BUF = MINDEX_HEAP_FREE, fwrite(&M_CHAR_BUF, sizeof(M_CHAR_BUF), 1, F), \
	M_INT_BUF = M_SWAP(HF_ADR), fwrite(&M_INT_BUF, sizeof(M_INT_BUF), 1, F), \
	M_INT_BUF = M_SWAP(HF_REF), fwrite(&M_INT_BUF, sizeof(M_INT_BUF), 1, F), \
	1
#ifdef M_BINARY
#define MPRINT_HEAP_FREE(F, TIME, PROC, PID, HF_ADR, HF_REF) \
	MPRINT_BINARY_HEAP_FREE(F, TIME, PROC, PID, HF_ADR, HF_REF)
#else
#define MPRINT_HEAP_FREE(F, TIME, PROC, PID, HF_ADR, HF_REF) \
	MPRINT_ASCII_HEAP_FREE(F, TIME, PROC, PID, HF_ADR, HF_REF)
#endif

#define MINDEX_HEAP_COMPACT 3
#define D_M_C_HEAP_COMPACT D_M_CHECK(3)
#define MPRINT_ASCII_HEAP_COMPACT(F, TIME, PROC, PID) \
	fprintf(F, "%.lf %d %d HEAP_COMPACT\n", TIME, PROC, PID)
#define MPRINT_BINARY_HEAP_COMPACT(F, TIME, PROC, PID) \
	M_TIMER_TYPE_BUF = TIME, fwrite(&M_TIMER_TYPE_BUF, sizeof(M_TIMER_TYPE), 1, F), \
	M_BINARY_COUNT = sizeof(PROCESS_NR_TYPE) + sizeof(PROCESS_PID_TYPE) + sizeof(M_CHAR_BUF), \
	fwrite(&M_BINARY_COUNT, sizeof(M_BINARY_COUNT_TYPE), 1, F), \
	PROCESS_NR_BUF = PROC, fwrite(&PROCESS_NR_BUF, sizeof(PROCESS_NR_TYPE), 1, F), \
	PROCESS_PID_BUF = M_SWAP(PID), fwrite(&PROCESS_PID_BUF, sizeof(PROCESS_PID_TYPE), 1, F), \
	M_CHAR_BUF = MINDEX_HEAP_COMPACT, fwrite(&M_CHAR_BUF, sizeof(M_CHAR_BUF), 1, F), \
	1
#ifdef M_BINARY
#define MPRINT_HEAP_COMPACT(F, TIME, PROC, PID) \
	MPRINT_BINARY_HEAP_COMPACT(F, TIME, PROC, PID)
#else
#define MPRINT_HEAP_COMPACT(F, TIME, PROC, PID) \
	MPRINT_ASCII_HEAP_COMPACT(F, TIME, PROC, PID)
#endif

#define MINDEX_DESC_ALLOC 4
#define D_M_C_DESC_ALLOC D_M_CHECK(4)
#define MPRINT_ASCII_DESC_ALLOC(F, TIME, PROC, PID, DA_ADR) \
	fprintf(F, "%.lf %d %d DESC_ALLOC %d\n", TIME, PROC, PID, DA_ADR)
#define MPRINT_BINARY_DESC_ALLOC(F, TIME, PROC, PID, DA_ADR) \
	M_TIMER_TYPE_BUF = TIME, fwrite(&M_TIMER_TYPE_BUF, sizeof(M_TIMER_TYPE), 1, F), \
	M_BINARY_COUNT = sizeof(PROCESS_NR_TYPE) + sizeof(PROCESS_PID_TYPE) + sizeof(M_CHAR_BUF) + sizeof(M_INT_BUF), \
	fwrite(&M_BINARY_COUNT, sizeof(M_BINARY_COUNT_TYPE), 1, F), \
	PROCESS_NR_BUF = PROC, fwrite(&PROCESS_NR_BUF, sizeof(PROCESS_NR_TYPE), 1, F), \
	PROCESS_PID_BUF = M_SWAP(PID), fwrite(&PROCESS_PID_BUF, sizeof(PROCESS_PID_TYPE), 1, F), \
	M_CHAR_BUF = MINDEX_DESC_ALLOC, fwrite(&M_CHAR_BUF, sizeof(M_CHAR_BUF), 1, F), \
	M_INT_BUF = M_SWAP(DA_ADR), fwrite(&M_INT_BUF, sizeof(M_INT_BUF), 1, F), \
	1
#ifdef M_BINARY
#define MPRINT_DESC_ALLOC(F, TIME, PROC, PID, DA_ADR) \
	MPRINT_BINARY_DESC_ALLOC(F, TIME, PROC, PID, DA_ADR)
#else
#define MPRINT_DESC_ALLOC(F, TIME, PROC, PID, DA_ADR) \
	MPRINT_ASCII_DESC_ALLOC(F, TIME, PROC, PID, DA_ADR)
#endif

#define MINDEX_DESC_FREE 5
#define D_M_C_DESC_FREE D_M_CHECK(5)
#define MPRINT_ASCII_DESC_FREE(F, TIME, PROC, PID, DF_ADR) \
	fprintf(F, "%.lf %d %d DESC_FREE %d\n", TIME, PROC, PID, DF_ADR)
#define MPRINT_BINARY_DESC_FREE(F, TIME, PROC, PID, DF_ADR) \
	M_TIMER_TYPE_BUF = TIME, fwrite(&M_TIMER_TYPE_BUF, sizeof(M_TIMER_TYPE), 1, F), \
	M_BINARY_COUNT = sizeof(PROCESS_NR_TYPE) + sizeof(PROCESS_PID_TYPE) + sizeof(M_CHAR_BUF) + sizeof(M_INT_BUF), \
	fwrite(&M_BINARY_COUNT, sizeof(M_BINARY_COUNT_TYPE), 1, F), \
	PROCESS_NR_BUF = PROC, fwrite(&PROCESS_NR_BUF, sizeof(PROCESS_NR_TYPE), 1, F), \
	PROCESS_PID_BUF = M_SWAP(PID), fwrite(&PROCESS_PID_BUF, sizeof(PROCESS_PID_TYPE), 1, F), \
	M_CHAR_BUF = MINDEX_DESC_FREE, fwrite(&M_CHAR_BUF, sizeof(M_CHAR_BUF), 1, F), \
	M_INT_BUF = M_SWAP(DF_ADR), fwrite(&M_INT_BUF, sizeof(M_INT_BUF), 1, F), \
	1
#ifdef M_BINARY
#define MPRINT_DESC_FREE(F, TIME, PROC, PID, DF_ADR) \
	MPRINT_BINARY_DESC_FREE(F, TIME, PROC, PID, DF_ADR)
#else
#define MPRINT_DESC_FREE(F, TIME, PROC, PID, DF_ADR) \
	MPRINT_ASCII_DESC_FREE(F, TIME, PROC, PID, DF_ADR)
#endif

#define MINDEX_STACK_PUSH 6
#define D_M_C_STACK_PUSH D_M_CHECK(6)
#define MPRINT_ASCII_STACK_PUSH(F, TIME, PROC, PID, PS_STACK) \
	fprintf(F, "%.lf %d %d STACK_PUSH %s\n", TIME, PROC, PID, PS_STACK)
#define MPRINT_BINARY_STACK_PUSH(F, TIME, PROC, PID, PS_STACK) \
	M_TIMER_TYPE_BUF = TIME, fwrite(&M_TIMER_TYPE_BUF, sizeof(M_TIMER_TYPE), 1, F), \
	M_BINARY_COUNT = sizeof(PROCESS_NR_TYPE) + sizeof(PROCESS_PID_TYPE) + sizeof(M_CHAR_BUF) + strlen(PS_STACK)+1, \
	fwrite(&M_BINARY_COUNT, sizeof(M_BINARY_COUNT_TYPE), 1, F), \
	PROCESS_NR_BUF = PROC, fwrite(&PROCESS_NR_BUF, sizeof(PROCESS_NR_TYPE), 1, F), \
	PROCESS_PID_BUF = M_SWAP(PID), fwrite(&PROCESS_PID_BUF, sizeof(PROCESS_PID_TYPE), 1, F), \
	M_CHAR_BUF = MINDEX_STACK_PUSH, fwrite(&M_CHAR_BUF, sizeof(M_CHAR_BUF), 1, F), \
	M_PCHAR_BUF = PS_STACK, fwrite(M_PCHAR_BUF, strlen(M_PCHAR_BUF)+1, 1, F), \
	1
#ifdef M_BINARY
#define MPRINT_STACK_PUSH(F, TIME, PROC, PID, PS_STACK) \
	MPRINT_BINARY_STACK_PUSH(F, TIME, PROC, PID, PS_STACK)
#else
#define MPRINT_STACK_PUSH(F, TIME, PROC, PID, PS_STACK) \
	MPRINT_ASCII_STACK_PUSH(F, TIME, PROC, PID, PS_STACK)
#endif

#define MINDEX_STACK_POP 7
#define D_M_C_STACK_POP D_M_CHECK(7)
#define MPRINT_ASCII_STACK_POP(F, TIME, PROC, PID, PP_STACK) \
	fprintf(F, "%.lf %d %d STACK_POP %s\n", TIME, PROC, PID, PP_STACK)
#define MPRINT_BINARY_STACK_POP(F, TIME, PROC, PID, PP_STACK) \
	M_TIMER_TYPE_BUF = TIME, fwrite(&M_TIMER_TYPE_BUF, sizeof(M_TIMER_TYPE), 1, F), \
	M_BINARY_COUNT = sizeof(PROCESS_NR_TYPE) + sizeof(PROCESS_PID_TYPE) + sizeof(M_CHAR_BUF) + strlen(PP_STACK)+1, \
	fwrite(&M_BINARY_COUNT, sizeof(M_BINARY_COUNT_TYPE), 1, F), \
	PROCESS_NR_BUF = PROC, fwrite(&PROCESS_NR_BUF, sizeof(PROCESS_NR_TYPE), 1, F), \
	PROCESS_PID_BUF = M_SWAP(PID), fwrite(&PROCESS_PID_BUF, sizeof(PROCESS_PID_TYPE), 1, F), \
	M_CHAR_BUF = MINDEX_STACK_POP, fwrite(&M_CHAR_BUF, sizeof(M_CHAR_BUF), 1, F), \
	M_PCHAR_BUF = PP_STACK, fwrite(M_PCHAR_BUF, strlen(M_PCHAR_BUF)+1, 1, F), \
	1
#ifdef M_BINARY
#define MPRINT_STACK_POP(F, TIME, PROC, PID, PP_STACK) \
	MPRINT_BINARY_STACK_POP(F, TIME, PROC, PID, PP_STACK)
#else
#define MPRINT_STACK_POP(F, TIME, PROC, PID, PP_STACK) \
	MPRINT_ASCII_STACK_POP(F, TIME, PROC, PID, PP_STACK)
#endif

#define MINDEX_STACK_SEG_FREE 8
#define D_M_C_STACK_SEG_FREE D_M_CHECK(8)
#define MPRINT_ASCII_STACK_SEG_FREE(F, TIME, PROC, PID, SSF_STACK) \
	fprintf(F, "%.lf %d %d STACK_SEG_FREE %s\n", TIME, PROC, PID, SSF_STACK)
#define MPRINT_BINARY_STACK_SEG_FREE(F, TIME, PROC, PID, SSF_STACK) \
	M_TIMER_TYPE_BUF = TIME, fwrite(&M_TIMER_TYPE_BUF, sizeof(M_TIMER_TYPE), 1, F), \
	M_BINARY_COUNT = sizeof(PROCESS_NR_TYPE) + sizeof(PROCESS_PID_TYPE) + sizeof(M_CHAR_BUF) + strlen(SSF_STACK)+1, \
	fwrite(&M_BINARY_COUNT, sizeof(M_BINARY_COUNT_TYPE), 1, F), \
	PROCESS_NR_BUF = PROC, fwrite(&PROCESS_NR_BUF, sizeof(PROCESS_NR_TYPE), 1, F), \
	PROCESS_PID_BUF = M_SWAP(PID), fwrite(&PROCESS_PID_BUF, sizeof(PROCESS_PID_TYPE), 1, F), \
	M_CHAR_BUF = MINDEX_STACK_SEG_FREE, fwrite(&M_CHAR_BUF, sizeof(M_CHAR_BUF), 1, F), \
	M_PCHAR_BUF = SSF_STACK, fwrite(M_PCHAR_BUF, strlen(M_PCHAR_BUF)+1, 1, F), \
	1
#ifdef M_BINARY
#define MPRINT_STACK_SEG_FREE(F, TIME, PROC, PID, SSF_STACK) \
	MPRINT_BINARY_STACK_SEG_FREE(F, TIME, PROC, PID, SSF_STACK)
#else
#define MPRINT_STACK_SEG_FREE(F, TIME, PROC, PID, SSF_STACK) \
	MPRINT_ASCII_STACK_SEG_FREE(F, TIME, PROC, PID, SSF_STACK)
#endif

#define MINDEX_STACK_SEG_ALLOC 9
#define D_M_C_STACK_SEG_ALLOC D_M_CHECK(9)
#define MPRINT_ASCII_STACK_SEG_ALLOC(F, TIME, PROC, PID, SSA_STACK) \
	fprintf(F, "%.lf %d %d STACK_SEG_ALLOC %s\n", TIME, PROC, PID, SSA_STACK)
#define MPRINT_BINARY_STACK_SEG_ALLOC(F, TIME, PROC, PID, SSA_STACK) \
	M_TIMER_TYPE_BUF = TIME, fwrite(&M_TIMER_TYPE_BUF, sizeof(M_TIMER_TYPE), 1, F), \
	M_BINARY_COUNT = sizeof(PROCESS_NR_TYPE) + sizeof(PROCESS_PID_TYPE) + sizeof(M_CHAR_BUF) + strlen(SSA_STACK)+1, \
	fwrite(&M_BINARY_COUNT, sizeof(M_BINARY_COUNT_TYPE), 1, F), \
	PROCESS_NR_BUF = PROC, fwrite(&PROCESS_NR_BUF, sizeof(PROCESS_NR_TYPE), 1, F), \
	PROCESS_PID_BUF = M_SWAP(PID), fwrite(&PROCESS_PID_BUF, sizeof(PROCESS_PID_TYPE), 1, F), \
	M_CHAR_BUF = MINDEX_STACK_SEG_ALLOC, fwrite(&M_CHAR_BUF, sizeof(M_CHAR_BUF), 1, F), \
	M_PCHAR_BUF = SSA_STACK, fwrite(M_PCHAR_BUF, strlen(M_PCHAR_BUF)+1, 1, F), \
	1
#ifdef M_BINARY
#define MPRINT_STACK_SEG_ALLOC(F, TIME, PROC, PID, SSA_STACK) \
	MPRINT_BINARY_STACK_SEG_ALLOC(F, TIME, PROC, PID, SSA_STACK)
#else
#define MPRINT_STACK_SEG_ALLOC(F, TIME, PROC, PID, SSA_STACK) \
	MPRINT_ASCII_STACK_SEG_ALLOC(F, TIME, PROC, PID, SSA_STACK)
#endif

#define MINDEX_COUNT_DIST 10
#define D_M_C_DIST D_M_CHECK(10)

#define MINDEX_COUNT_DISTB 11
#define D_M_C_DISTB D_M_CHECK(11)

#define MINDEX_PROC_DISTSTACKS 12
#define D_M_C_PROC_DISTSTACKS D_M_CHECK(12)
#define MPRINT_ASCII_PROC_DISTSTACKS(F, TIME, PROC, PID, PDS_SIZE) \
	fprintf(F, "%.lf %d %d PROC_DISTSTACKS %d\n", TIME, PROC, PID, PDS_SIZE)
#define MPRINT_BINARY_PROC_DISTSTACKS(F, TIME, PROC, PID, PDS_SIZE) \
	M_TIMER_TYPE_BUF = TIME, fwrite(&M_TIMER_TYPE_BUF, sizeof(M_TIMER_TYPE), 1, F), \
	M_BINARY_COUNT = sizeof(PROCESS_NR_TYPE) + sizeof(PROCESS_PID_TYPE) + sizeof(M_CHAR_BUF) + sizeof(M_INT_BUF), \
	fwrite(&M_BINARY_COUNT, sizeof(M_BINARY_COUNT_TYPE), 1, F), \
	PROCESS_NR_BUF = PROC, fwrite(&PROCESS_NR_BUF, sizeof(PROCESS_NR_TYPE), 1, F), \
	PROCESS_PID_BUF = M_SWAP(PID), fwrite(&PROCESS_PID_BUF, sizeof(PROCESS_PID_TYPE), 1, F), \
	M_CHAR_BUF = MINDEX_PROC_DISTSTACKS, fwrite(&M_CHAR_BUF, sizeof(M_CHAR_BUF), 1, F), \
	M_INT_BUF = M_SWAP(PDS_SIZE), fwrite(&M_INT_BUF, sizeof(M_INT_BUF), 1, F), \
	1
#ifdef M_BINARY
#define MPRINT_PROC_DISTSTACKS(F, TIME, PROC, PID, PDS_SIZE) \
	MPRINT_BINARY_PROC_DISTSTACKS(F, TIME, PROC, PID, PDS_SIZE)
#else
#define MPRINT_PROC_DISTSTACKS(F, TIME, PROC, PID, PDS_SIZE) \
	MPRINT_ASCII_PROC_DISTSTACKS(F, TIME, PROC, PID, PDS_SIZE)
#endif

#define MINDEX_PROC_DIST 13
#define D_M_C_PROC_DIST D_M_CHECK(13)
#define MPRINT_ASCII_PROC_DIST(F, TIME, PROC, PID, PD_NEXT_PROC, PD_SIZE) \
	fprintf(F, "%.lf %d %d PROC_DIST %d %d\n", TIME, PROC, PID, PD_NEXT_PROC, PD_SIZE)
#define MPRINT_BINARY_PROC_DIST(F, TIME, PROC, PID, PD_NEXT_PROC, PD_SIZE) \
	M_TIMER_TYPE_BUF = TIME, fwrite(&M_TIMER_TYPE_BUF, sizeof(M_TIMER_TYPE), 1, F), \
	M_BINARY_COUNT = sizeof(PROCESS_NR_TYPE) + sizeof(PROCESS_PID_TYPE) + sizeof(M_CHAR_BUF) + sizeof(M_INT_BUF) + sizeof(M_INT_BUF), \
	fwrite(&M_BINARY_COUNT, sizeof(M_BINARY_COUNT_TYPE), 1, F), \
	PROCESS_NR_BUF = PROC, fwrite(&PROCESS_NR_BUF, sizeof(PROCESS_NR_TYPE), 1, F), \
	PROCESS_PID_BUF = M_SWAP(PID), fwrite(&PROCESS_PID_BUF, sizeof(PROCESS_PID_TYPE), 1, F), \
	M_CHAR_BUF = MINDEX_PROC_DIST, fwrite(&M_CHAR_BUF, sizeof(M_CHAR_BUF), 1, F), \
	M_INT_BUF = M_SWAP(PD_NEXT_PROC), fwrite(&M_INT_BUF, sizeof(M_INT_BUF), 1, F), \
	M_INT_BUF = M_SWAP(PD_SIZE), fwrite(&M_INT_BUF, sizeof(M_INT_BUF), 1, F), \
	1
#ifdef M_BINARY
#define MPRINT_PROC_DIST(F, TIME, PROC, PID, PD_NEXT_PROC, PD_SIZE) \
	MPRINT_BINARY_PROC_DIST(F, TIME, PROC, PID, PD_NEXT_PROC, PD_SIZE)
#else
#define MPRINT_PROC_DIST(F, TIME, PROC, PID, PD_NEXT_PROC, PD_SIZE) \
	MPRINT_ASCII_PROC_DIST(F, TIME, PROC, PID, PD_NEXT_PROC, PD_SIZE)
#endif

#define MINDEX_PROC_NODIST 14
#define D_M_C_PROC_NODIST D_M_CHECK(14)
#define MPRINT_ASCII_PROC_NODIST(F, TIME, PROC, PID) \
	fprintf(F, "%.lf %d %d PROC_NODIST\n", TIME, PROC, PID)
#define MPRINT_BINARY_PROC_NODIST(F, TIME, PROC, PID) \
	M_TIMER_TYPE_BUF = TIME, fwrite(&M_TIMER_TYPE_BUF, sizeof(M_TIMER_TYPE), 1, F), \
	M_BINARY_COUNT = sizeof(PROCESS_NR_TYPE) + sizeof(PROCESS_PID_TYPE) + sizeof(M_CHAR_BUF), \
	fwrite(&M_BINARY_COUNT, sizeof(M_BINARY_COUNT_TYPE), 1, F), \
	PROCESS_NR_BUF = PROC, fwrite(&PROCESS_NR_BUF, sizeof(PROCESS_NR_TYPE), 1, F), \
	PROCESS_PID_BUF = M_SWAP(PID), fwrite(&PROCESS_PID_BUF, sizeof(PROCESS_PID_TYPE), 1, F), \
	M_CHAR_BUF = MINDEX_PROC_NODIST, fwrite(&M_CHAR_BUF, sizeof(M_CHAR_BUF), 1, F), \
	1
#ifdef M_BINARY
#define MPRINT_PROC_NODIST(F, TIME, PROC, PID) \
	MPRINT_BINARY_PROC_NODIST(F, TIME, PROC, PID)
#else
#define MPRINT_PROC_NODIST(F, TIME, PROC, PID) \
	MPRINT_ASCII_PROC_NODIST(F, TIME, PROC, PID)
#endif

#define MINDEX_PROC_CREATE 15
#define D_M_C_PROC_CREATE D_M_CHECK(15)
#define MPRINT_ASCII_PROC_CREATE(F, TIME, PROC, PID, PC_PID) \
	fprintf(F, "%.lf %d %d PROC_CREATE %d\n", TIME, PROC, PID, PC_PID)
#define MPRINT_BINARY_PROC_CREATE(F, TIME, PROC, PID, PC_PID) \
	M_TIMER_TYPE_BUF = TIME, fwrite(&M_TIMER_TYPE_BUF, sizeof(M_TIMER_TYPE), 1, F), \
	M_BINARY_COUNT = sizeof(PROCESS_NR_TYPE) + sizeof(PROCESS_PID_TYPE) + sizeof(M_CHAR_BUF) + sizeof(M_INT_BUF), \
	fwrite(&M_BINARY_COUNT, sizeof(M_BINARY_COUNT_TYPE), 1, F), \
	PROCESS_NR_BUF = PROC, fwrite(&PROCESS_NR_BUF, sizeof(PROCESS_NR_TYPE), 1, F), \
	PROCESS_PID_BUF = M_SWAP(PID), fwrite(&PROCESS_PID_BUF, sizeof(PROCESS_PID_TYPE), 1, F), \
	M_CHAR_BUF = MINDEX_PROC_CREATE, fwrite(&M_CHAR_BUF, sizeof(M_CHAR_BUF), 1, F), \
	M_INT_BUF = M_SWAP(PC_PID), fwrite(&M_INT_BUF, sizeof(M_INT_BUF), 1, F), \
	1
#ifdef M_BINARY
#define MPRINT_PROC_CREATE(F, TIME, PROC, PID, PC_PID) \
	MPRINT_BINARY_PROC_CREATE(F, TIME, PROC, PID, PC_PID)
#else
#define MPRINT_PROC_CREATE(F, TIME, PROC, PID, PC_PID) \
	MPRINT_ASCII_PROC_CREATE(F, TIME, PROC, PID, PC_PID)
#endif

#define MINDEX_PROC_TERMINATE 16
#define D_M_C_PROC_TERMINATE D_M_CHECK(16)
#define MPRINT_ASCII_PROC_TERMINATE(F, TIME, PROC, PID, PT_PID) \
	fprintf(F, "%.lf %d %d PROC_TERMINATE %d\n", TIME, PROC, PID, PT_PID)
#define MPRINT_BINARY_PROC_TERMINATE(F, TIME, PROC, PID, PT_PID) \
	M_TIMER_TYPE_BUF = TIME, fwrite(&M_TIMER_TYPE_BUF, sizeof(M_TIMER_TYPE), 1, F), \
	M_BINARY_COUNT = sizeof(PROCESS_NR_TYPE) + sizeof(PROCESS_PID_TYPE) + sizeof(M_CHAR_BUF) + sizeof(M_INT_BUF), \
	fwrite(&M_BINARY_COUNT, sizeof(M_BINARY_COUNT_TYPE), 1, F), \
	PROCESS_NR_BUF = PROC, fwrite(&PROCESS_NR_BUF, sizeof(PROCESS_NR_TYPE), 1, F), \
	PROCESS_PID_BUF = M_SWAP(PID), fwrite(&PROCESS_PID_BUF, sizeof(PROCESS_PID_TYPE), 1, F), \
	M_CHAR_BUF = MINDEX_PROC_TERMINATE, fwrite(&M_CHAR_BUF, sizeof(M_CHAR_BUF), 1, F), \
	M_INT_BUF = M_SWAP(PT_PID), fwrite(&M_INT_BUF, sizeof(M_INT_BUF), 1, F), \
	1
#ifdef M_BINARY
#define MPRINT_PROC_TERMINATE(F, TIME, PROC, PID, PT_PID) \
	MPRINT_BINARY_PROC_TERMINATE(F, TIME, PROC, PID, PT_PID)
#else
#define MPRINT_PROC_TERMINATE(F, TIME, PROC, PID, PT_PID) \
	MPRINT_ASCII_PROC_TERMINATE(F, TIME, PROC, PID, PT_PID)
#endif

#define MINDEX_PROC_DISTEND 17
#define D_M_C_PROC_DISTEND D_M_CHECK(17)
#define MPRINT_ASCII_PROC_DISTEND(F, TIME, PROC, PID, PD_RET_PID, PD_RET_PROC) \
	fprintf(F, "%.lf %d %d PROC_DISTEND %d %d\n", TIME, PROC, PID, PD_RET_PID, PD_RET_PROC)
#define MPRINT_BINARY_PROC_DISTEND(F, TIME, PROC, PID, PD_RET_PID, PD_RET_PROC) \
	M_TIMER_TYPE_BUF = TIME, fwrite(&M_TIMER_TYPE_BUF, sizeof(M_TIMER_TYPE), 1, F), \
	M_BINARY_COUNT = sizeof(PROCESS_NR_TYPE) + sizeof(PROCESS_PID_TYPE) + sizeof(M_CHAR_BUF) + sizeof(M_INT_BUF) + sizeof(M_INT_BUF), \
	fwrite(&M_BINARY_COUNT, sizeof(M_BINARY_COUNT_TYPE), 1, F), \
	PROCESS_NR_BUF = PROC, fwrite(&PROCESS_NR_BUF, sizeof(PROCESS_NR_TYPE), 1, F), \
	PROCESS_PID_BUF = M_SWAP(PID), fwrite(&PROCESS_PID_BUF, sizeof(PROCESS_PID_TYPE), 1, F), \
	M_CHAR_BUF = MINDEX_PROC_DISTEND, fwrite(&M_CHAR_BUF, sizeof(M_CHAR_BUF), 1, F), \
	M_INT_BUF = M_SWAP(PD_RET_PID), fwrite(&M_INT_BUF, sizeof(M_INT_BUF), 1, F), \
	M_INT_BUF = M_SWAP(PD_RET_PROC), fwrite(&M_INT_BUF, sizeof(M_INT_BUF), 1, F), \
	1
#ifdef M_BINARY
#define MPRINT_PROC_DISTEND(F, TIME, PROC, PID, PD_RET_PID, PD_RET_PROC) \
	MPRINT_BINARY_PROC_DISTEND(F, TIME, PROC, PID, PD_RET_PID, PD_RET_PROC)
#else
#define MPRINT_PROC_DISTEND(F, TIME, PROC, PID, PD_RET_PID, PD_RET_PROC) \
	MPRINT_ASCII_PROC_DISTEND(F, TIME, PROC, PID, PD_RET_PID, PD_RET_PROC)
#endif

#define MINDEX_PROC_SLEEP 18
#define D_M_C_PROC_SLEEP D_M_CHECK(18)
#define MPRINT_ASCII_PROC_SLEEP(F, TIME, PROC, PID, PS_PID) \
	fprintf(F, "%.lf %d %d PROC_SLEEP %d\n", TIME, PROC, PID, PS_PID)
#define MPRINT_BINARY_PROC_SLEEP(F, TIME, PROC, PID, PS_PID) \
	M_TIMER_TYPE_BUF = TIME, fwrite(&M_TIMER_TYPE_BUF, sizeof(M_TIMER_TYPE), 1, F), \
	M_BINARY_COUNT = sizeof(PROCESS_NR_TYPE) + sizeof(PROCESS_PID_TYPE) + sizeof(M_CHAR_BUF) + sizeof(M_INT_BUF), \
	fwrite(&M_BINARY_COUNT, sizeof(M_BINARY_COUNT_TYPE), 1, F), \
	PROCESS_NR_BUF = PROC, fwrite(&PROCESS_NR_BUF, sizeof(PROCESS_NR_TYPE), 1, F), \
	PROCESS_PID_BUF = M_SWAP(PID), fwrite(&PROCESS_PID_BUF, sizeof(PROCESS_PID_TYPE), 1, F), \
	M_CHAR_BUF = MINDEX_PROC_SLEEP, fwrite(&M_CHAR_BUF, sizeof(M_CHAR_BUF), 1, F), \
	M_INT_BUF = M_SWAP(PS_PID), fwrite(&M_INT_BUF, sizeof(M_INT_BUF), 1, F), \
	1
#ifdef M_BINARY
#define MPRINT_PROC_SLEEP(F, TIME, PROC, PID, PS_PID) \
	MPRINT_BINARY_PROC_SLEEP(F, TIME, PROC, PID, PS_PID)
#else
#define MPRINT_PROC_SLEEP(F, TIME, PROC, PID, PS_PID) \
	MPRINT_ASCII_PROC_SLEEP(F, TIME, PROC, PID, PS_PID)
#endif

#define MINDEX_PROC_RUN 19
#define D_M_C_PROC_RUN D_M_CHECK(19)
#define MPRINT_ASCII_PROC_RUN(F, TIME, PROC, PID, PR_PID) \
	fprintf(F, "%.lf %d %d PROC_RUN %d\n", TIME, PROC, PID, PR_PID)
#define MPRINT_BINARY_PROC_RUN(F, TIME, PROC, PID, PR_PID) \
	M_TIMER_TYPE_BUF = TIME, fwrite(&M_TIMER_TYPE_BUF, sizeof(M_TIMER_TYPE), 1, F), \
	M_BINARY_COUNT = sizeof(PROCESS_NR_TYPE) + sizeof(PROCESS_PID_TYPE) + sizeof(M_CHAR_BUF) + sizeof(M_INT_BUF), \
	fwrite(&M_BINARY_COUNT, sizeof(M_BINARY_COUNT_TYPE), 1, F), \
	PROCESS_NR_BUF = PROC, fwrite(&PROCESS_NR_BUF, sizeof(PROCESS_NR_TYPE), 1, F), \
	PROCESS_PID_BUF = M_SWAP(PID), fwrite(&PROCESS_PID_BUF, sizeof(PROCESS_PID_TYPE), 1, F), \
	M_CHAR_BUF = MINDEX_PROC_RUN, fwrite(&M_CHAR_BUF, sizeof(M_CHAR_BUF), 1, F), \
	M_INT_BUF = M_SWAP(PR_PID), fwrite(&M_INT_BUF, sizeof(M_INT_BUF), 1, F), \
	1
#ifdef M_BINARY
#define MPRINT_PROC_RUN(F, TIME, PROC, PID, PR_PID) \
	MPRINT_BINARY_PROC_RUN(F, TIME, PROC, PID, PR_PID)
#else
#define MPRINT_PROC_RUN(F, TIME, PROC, PID, PR_PID) \
	MPRINT_ASCII_PROC_RUN(F, TIME, PROC, PID, PR_PID)
#endif

#define MINDEX_PROC_WAKEUP 20
#define D_M_C_PROC_WAKEUP D_M_CHECK(20)
#define MPRINT_ASCII_PROC_WAKEUP(F, TIME, PROC, PID, PW_PID) \
	fprintf(F, "%.lf %d %d PROC_WAKEUP %d\n", TIME, PROC, PID, PW_PID)
#define MPRINT_BINARY_PROC_WAKEUP(F, TIME, PROC, PID, PW_PID) \
	M_TIMER_TYPE_BUF = TIME, fwrite(&M_TIMER_TYPE_BUF, sizeof(M_TIMER_TYPE), 1, F), \
	M_BINARY_COUNT = sizeof(PROCESS_NR_TYPE) + sizeof(PROCESS_PID_TYPE) + sizeof(M_CHAR_BUF) + sizeof(M_INT_BUF), \
	fwrite(&M_BINARY_COUNT, sizeof(M_BINARY_COUNT_TYPE), 1, F), \
	PROCESS_NR_BUF = PROC, fwrite(&PROCESS_NR_BUF, sizeof(PROCESS_NR_TYPE), 1, F), \
	PROCESS_PID_BUF = M_SWAP(PID), fwrite(&PROCESS_PID_BUF, sizeof(PROCESS_PID_TYPE), 1, F), \
	M_CHAR_BUF = MINDEX_PROC_WAKEUP, fwrite(&M_CHAR_BUF, sizeof(M_CHAR_BUF), 1, F), \
	M_INT_BUF = M_SWAP(PW_PID), fwrite(&M_INT_BUF, sizeof(M_INT_BUF), 1, F), \
	1
#ifdef M_BINARY
#define MPRINT_PROC_WAKEUP(F, TIME, PROC, PID, PW_PID) \
	MPRINT_BINARY_PROC_WAKEUP(F, TIME, PROC, PID, PW_PID)
#else
#define MPRINT_PROC_WAKEUP(F, TIME, PROC, PID, PW_PID) \
	MPRINT_ASCII_PROC_WAKEUP(F, TIME, PROC, PID, PW_PID)
#endif

#define MINDEX_SEND_BEGIN 21
#define D_M_C_SEND_BEGIN D_M_CHECK(21)
#define MPRINT_ASCII_SEND_BEGIN(F, TIME, PROC, PID, S_TYPE, S_TARGET_PROC, S_TARGET_PID) \
	fprintf(F, "%.lf %d %d SEND_BEGIN %s %d %d\n", TIME, PROC, PID, S_TYPE, S_TARGET_PROC, S_TARGET_PID)
#define MPRINT_BINARY_SEND_BEGIN(F, TIME, PROC, PID, S_TYPE, S_TARGET_PROC, S_TARGET_PID) \
	M_TIMER_TYPE_BUF = TIME, fwrite(&M_TIMER_TYPE_BUF, sizeof(M_TIMER_TYPE), 1, F), \
	M_BINARY_COUNT = sizeof(PROCESS_NR_TYPE) + sizeof(PROCESS_PID_TYPE) + sizeof(M_CHAR_BUF) + strlen(S_TYPE)+1 + sizeof(M_INT_BUF) + sizeof(M_INT_BUF), \
	fwrite(&M_BINARY_COUNT, sizeof(M_BINARY_COUNT_TYPE), 1, F), \
	PROCESS_NR_BUF = PROC, fwrite(&PROCESS_NR_BUF, sizeof(PROCESS_NR_TYPE), 1, F), \
	PROCESS_PID_BUF = M_SWAP(PID), fwrite(&PROCESS_PID_BUF, sizeof(PROCESS_PID_TYPE), 1, F), \
	M_CHAR_BUF = MINDEX_SEND_BEGIN, fwrite(&M_CHAR_BUF, sizeof(M_CHAR_BUF), 1, F), \
	M_PCHAR_BUF = S_TYPE, fwrite(M_PCHAR_BUF, strlen(M_PCHAR_BUF)+1, 1, F), \
	M_INT_BUF = M_SWAP(S_TARGET_PROC), fwrite(&M_INT_BUF, sizeof(M_INT_BUF), 1, F), \
	M_INT_BUF = M_SWAP(S_TARGET_PID), fwrite(&M_INT_BUF, sizeof(M_INT_BUF), 1, F), \
	1
#ifdef M_BINARY
#define MPRINT_SEND_BEGIN(F, TIME, PROC, PID, S_TYPE, S_TARGET_PROC, S_TARGET_PID) \
	MPRINT_BINARY_SEND_BEGIN(F, TIME, PROC, PID, S_TYPE, S_TARGET_PROC, S_TARGET_PID)
#else
#define MPRINT_SEND_BEGIN(F, TIME, PROC, PID, S_TYPE, S_TARGET_PROC, S_TARGET_PID) \
	MPRINT_ASCII_SEND_BEGIN(F, TIME, PROC, PID, S_TYPE, S_TARGET_PROC, S_TARGET_PID)
#endif

#define MINDEX_SEND_END 22
#define D_M_C_SEND_END D_M_CHECK(22)
#define MPRINT_ASCII_SEND_END(F, TIME, PROC, PID, S_SIZE) \
	fprintf(F, "%.lf %d %d SEND_END %d\n", TIME, PROC, PID, S_SIZE)
#define MPRINT_BINARY_SEND_END(F, TIME, PROC, PID, S_SIZE) \
	M_TIMER_TYPE_BUF = TIME, fwrite(&M_TIMER_TYPE_BUF, sizeof(M_TIMER_TYPE), 1, F), \
	M_BINARY_COUNT = sizeof(PROCESS_NR_TYPE) + sizeof(PROCESS_PID_TYPE) + sizeof(M_CHAR_BUF) + sizeof(M_INT_BUF), \
	fwrite(&M_BINARY_COUNT, sizeof(M_BINARY_COUNT_TYPE), 1, F), \
	PROCESS_NR_BUF = PROC, fwrite(&PROCESS_NR_BUF, sizeof(PROCESS_NR_TYPE), 1, F), \
	PROCESS_PID_BUF = M_SWAP(PID), fwrite(&PROCESS_PID_BUF, sizeof(PROCESS_PID_TYPE), 1, F), \
	M_CHAR_BUF = MINDEX_SEND_END, fwrite(&M_CHAR_BUF, sizeof(M_CHAR_BUF), 1, F), \
	M_INT_BUF = M_SWAP(S_SIZE), fwrite(&M_INT_BUF, sizeof(M_INT_BUF), 1, F), \
	1
#ifdef M_BINARY
#define MPRINT_SEND_END(F, TIME, PROC, PID, S_SIZE) \
	MPRINT_BINARY_SEND_END(F, TIME, PROC, PID, S_SIZE)
#else
#define MPRINT_SEND_END(F, TIME, PROC, PID, S_SIZE) \
	MPRINT_ASCII_SEND_END(F, TIME, PROC, PID, S_SIZE)
#endif

#define MINDEX_RECEIVE_BEGIN 23
#define D_M_C_RECEIVE_BEGIN D_M_CHECK(23)
#define MPRINT_ASCII_RECEIVE_BEGIN(F, TIME, PROC, PID) \
	fprintf(F, "%.lf %d %d RECEIVE_BEGIN\n", TIME, PROC, PID)
#define MPRINT_BINARY_RECEIVE_BEGIN(F, TIME, PROC, PID) \
	M_TIMER_TYPE_BUF = TIME, fwrite(&M_TIMER_TYPE_BUF, sizeof(M_TIMER_TYPE), 1, F), \
	M_BINARY_COUNT = sizeof(PROCESS_NR_TYPE) + sizeof(PROCESS_PID_TYPE) + sizeof(M_CHAR_BUF), \
	fwrite(&M_BINARY_COUNT, sizeof(M_BINARY_COUNT_TYPE), 1, F), \
	PROCESS_NR_BUF = PROC, fwrite(&PROCESS_NR_BUF, sizeof(PROCESS_NR_TYPE), 1, F), \
	PROCESS_PID_BUF = M_SWAP(PID), fwrite(&PROCESS_PID_BUF, sizeof(PROCESS_PID_TYPE), 1, F), \
	M_CHAR_BUF = MINDEX_RECEIVE_BEGIN, fwrite(&M_CHAR_BUF, sizeof(M_CHAR_BUF), 1, F), \
	1
#ifdef M_BINARY
#define MPRINT_RECEIVE_BEGIN(F, TIME, PROC, PID) \
	MPRINT_BINARY_RECEIVE_BEGIN(F, TIME, PROC, PID)
#else
#define MPRINT_RECEIVE_BEGIN(F, TIME, PROC, PID) \
	MPRINT_ASCII_RECEIVE_BEGIN(F, TIME, PROC, PID)
#endif

#define MINDEX_RECEIVE_END 24
#define D_M_C_RECEIVE_END D_M_CHECK(24)
#define MPRINT_ASCII_RECEIVE_END(F, TIME, PROC, PID, R_TYPE, R_FROM_PROC, R_FROM_PID, R_SIZE, R_FOR_PID) \
	fprintf(F, "%.lf %d %d RECEIVE_END %s %d %d %d %d\n", TIME, PROC, PID, R_TYPE, R_FROM_PROC, R_FROM_PID, R_SIZE, R_FOR_PID)
#define MPRINT_BINARY_RECEIVE_END(F, TIME, PROC, PID, R_TYPE, R_FROM_PROC, R_FROM_PID, R_SIZE, R_FOR_PID) \
	M_TIMER_TYPE_BUF = TIME, fwrite(&M_TIMER_TYPE_BUF, sizeof(M_TIMER_TYPE), 1, F), \
	M_BINARY_COUNT = sizeof(PROCESS_NR_TYPE) + sizeof(PROCESS_PID_TYPE) + sizeof(M_CHAR_BUF) + strlen(R_TYPE)+1 + sizeof(M_INT_BUF) + sizeof(M_INT_BUF) + sizeof(M_INT_BUF) + sizeof(M_INT_BUF), \
	fwrite(&M_BINARY_COUNT, sizeof(M_BINARY_COUNT_TYPE), 1, F), \
	PROCESS_NR_BUF = PROC, fwrite(&PROCESS_NR_BUF, sizeof(PROCESS_NR_TYPE), 1, F), \
	PROCESS_PID_BUF = M_SWAP(PID), fwrite(&PROCESS_PID_BUF, sizeof(PROCESS_PID_TYPE), 1, F), \
	M_CHAR_BUF = MINDEX_RECEIVE_END, fwrite(&M_CHAR_BUF, sizeof(M_CHAR_BUF), 1, F), \
	M_PCHAR_BUF = R_TYPE, fwrite(M_PCHAR_BUF, strlen(M_PCHAR_BUF)+1, 1, F), \
	M_INT_BUF = M_SWAP(R_FROM_PROC), fwrite(&M_INT_BUF, sizeof(M_INT_BUF), 1, F), \
	M_INT_BUF = M_SWAP(R_FROM_PID), fwrite(&M_INT_BUF, sizeof(M_INT_BUF), 1, F), \
	M_INT_BUF = M_SWAP(R_SIZE), fwrite(&M_INT_BUF, sizeof(M_INT_BUF), 1, F), \
	M_INT_BUF = M_SWAP(R_FOR_PID), fwrite(&M_INT_BUF, sizeof(M_INT_BUF), 1, F), \
	1
#ifdef M_BINARY
#define MPRINT_RECEIVE_END(F, TIME, PROC, PID, R_TYPE, R_FROM_PROC, R_FROM_PID, R_SIZE, R_FOR_PID) \
	MPRINT_BINARY_RECEIVE_END(F, TIME, PROC, PID, R_TYPE, R_FROM_PROC, R_FROM_PID, R_SIZE, R_FOR_PID)
#else
#define MPRINT_RECEIVE_END(F, TIME, PROC, PID, R_TYPE, R_FROM_PROC, R_FROM_PID, R_SIZE, R_FOR_PID) \
	MPRINT_ASCII_RECEIVE_END(F, TIME, PROC, PID, R_TYPE, R_FROM_PROC, R_FROM_PID, R_SIZE, R_FOR_PID)
#endif

#define MINDEX_COUNT_PUSH_W 25
#define D_M_C_PUSH_W D_M_CHECK(25)

#define MINDEX_COUNT_PUSHC_W 26
#define D_M_C_PUSHC_W D_M_CHECK(26)

#define MINDEX_COUNT_PUSH_AW 27
#define D_M_C_PUSH_AW D_M_CHECK(27)

#define MINDEX_COUNT_PUSH_AW0 28
#define D_M_C_PUSH_AW0 D_M_CHECK(28)

#define MINDEX_COUNT_MOVE_AW 29
#define D_M_C_MOVE_AW D_M_CHECK(29)

#define MINDEX_COUNT_DELTA1 30
#define D_M_C_DELTA1 D_M_CHECK(30)

#define MINDEX_COUNT_DELTA2 31
#define D_M_C_DELTA2 D_M_CHECK(31)

#define MINDEX_COUNT_DELTA3 32
#define D_M_C_DELTA3 D_M_CHECK(32)

#define MINDEX_COUNT_DELTA4 33
#define D_M_C_DELTA4 D_M_CHECK(33)

#define MINDEX_COUNT_ADD 34
#define D_M_C_ADD D_M_CHECK(34)

#define MINDEX_COUNT_SUB 35
#define D_M_C_SUB D_M_CHECK(35)

#define MINDEX_COUNT_MUL 36
#define D_M_C_MUL D_M_CHECK(36)

#define MINDEX_COUNT_DIV 37
#define D_M_C_DIV D_M_CHECK(37)

#define MINDEX_COUNT_MOD 38
#define D_M_C_MOD D_M_CHECK(38)

#define MINDEX_COUNT_EQ 39
#define D_M_C_EQ D_M_CHECK(39)

#define MINDEX_COUNT_NE 40
#define D_M_C_NE D_M_CHECK(40)

#define MINDEX_COUNT_LT 41
#define D_M_C_LT D_M_CHECK(41)

#define MINDEX_COUNT_LE 42
#define D_M_C_LE D_M_CHECK(42)

#define MINDEX_COUNT_GT 43
#define D_M_C_GT D_M_CHECK(43)

#define MINDEX_COUNT_GE 44
#define D_M_C_GE D_M_CHECK(44)

#define MINDEX_COUNT_NEG 45
#define D_M_C_NEG D_M_CHECK(45)

#define MINDEX_COUNT_NOT 46
#define D_M_C_NOT D_M_CHECK(46)

#define MINDEX_COUNT_OR 47
#define D_M_C_OR D_M_CHECK(47)

#define MINDEX_COUNT_AND 48
#define D_M_C_AND D_M_CHECK(48)

#define MINDEX_COUNT_XOR 49
#define D_M_C_XOR D_M_CHECK(49)

#define MINDEX_COUNT_JFALSE 50
#define D_M_C_JFALSE D_M_CHECK(50)

#define MINDEX_COUNT_JTRUE 51
#define D_M_C_JTRUE D_M_CHECK(51)

#define MINDEX_COUNT_JCOND 52
#define D_M_C_JCOND D_M_CHECK(52)

#define MINDEX_COUNT_PUSHRET 53
#define D_M_C_PUSHRET D_M_CHECK(53)

#define MINDEX_COUNT_BETA 54
#define D_M_C_BETA D_M_CHECK(54)

#define MINDEX_COUNT_BETA0 55
#define D_M_C_BETA0 D_M_CHECK(55)

#define MINDEX_COUNT_BETA1 56
#define D_M_C_BETA1 D_M_CHECK(56)

#define MINDEX_COUNT_JTAIL 57
#define D_M_C_JTAIL D_M_CHECK(57)

#define MINDEX_COUNT_JTAIL0 58
#define D_M_C_JTAIL0 D_M_CHECK(58)

#define MINDEX_COUNT_JTAIL1 59
#define D_M_C_JTAIL1 D_M_CHECK(59)

#define MINDEX_COUNT_BETAQ 60
#define D_M_C_BETAQ D_M_CHECK(60)

#define MINDEX_COUNT_BETAQ0 61
#define D_M_C_BETAQ0 D_M_CHECK(61)

#define MINDEX_COUNT_BETAQ1 62
#define D_M_C_BETAQ1 D_M_CHECK(62)

#define MINDEX_COUNT_JTAILQ 63
#define D_M_C_JTAILQ D_M_CHECK(63)

#define MINDEX_COUNT_JTAILQ0 64
#define D_M_C_JTAILQ0 D_M_CHECK(64)

#define MINDEX_COUNT_JTAILQ1 65
#define D_M_C_JTAILQ1 D_M_CHECK(65)

#define MINDEX_COUNT_FREE_A 66
#define D_M_C_FREE_A D_M_CHECK(66)

#define MINDEX_COUNT_FREE1_A 67
#define D_M_C_FREE1_A D_M_CHECK(67)

#define MINDEX_COUNT_RTF 68
#define D_M_C_RTF D_M_CHECK(68)

#define MINDEX_COUNT_RTM 69
#define D_M_C_RTM D_M_CHECK(69)

#define MINDEX_COUNT_RTP 70
#define D_M_C_RTP D_M_CHECK(70)

#define MINDEX_COUNT_RTC 71
#define D_M_C_RTC D_M_CHECK(71)

#define MINDEX_COUNT_RTS 72
#define D_M_C_RTS D_M_CHECK(72)

#define MINDEX_COUNT_MKGCLOS 73
#define D_M_C_MKGCLOS D_M_CHECK(73)

#define MINDEX_COUNT_MKBCLOS 74
#define D_M_C_MKBCLOS D_M_CHECK(74)

#define MINDEX_COUNT_MKCCLOS 75
#define D_M_C_MKCCLOS D_M_CHECK(75)

#define MINDEX_COUNT_MKSCLOS 76
#define D_M_C_MKSCLOS D_M_CHECK(76)

#define MINDEX_COUNT_MKDCLOS 77
#define D_M_C_MKDCLOS D_M_CHECK(77)

#define MINDEX_COUNT_MKAP 78
#define D_M_C_MKAP D_M_CHECK(78)

#define MINDEX_COUNT_APPLY 79
#define D_M_C_APPLY D_M_CHECK(79)

#define MINDEX_COUNT_CASE 80
#define D_M_C_CASE D_M_CHECK(80)

#define MINDEX_COUNT_WHEN 81
#define D_M_C_WHEN D_M_CHECK(81)

#define MINDEX_COUNT_GUARD 82
#define D_M_C_GUARD D_M_CHECK(82)

#define MINDEX_COUNT_BODY 83
#define D_M_C_BODY D_M_CHECK(83)

#define MINDEX_COUNT_NOMATCH 84
#define D_M_C_NOMATCH D_M_CHECK(84)

#define MINDEX_COUNT_DUPARG 85
#define D_M_C_DUPARG D_M_CHECK(85)

#define MINDEX_COUNT_LSEL 86
#define D_M_C_LSEL D_M_CHECK(86)

#define MINDEX_COUNT_CONS 87
#define D_M_C_CONS D_M_CHECK(87)

#define MINDEX_COUNT_FCONS 88
#define D_M_C_FCONS D_M_CHECK(88)

#define MINDEX_COUNT_FIRST 89
#define D_M_C_FIRST D_M_CHECK(89)

#define MINDEX_COUNT_REST 90
#define D_M_C_REST D_M_CHECK(90)

#define MINDEX_COUNT_EXT 91
#define D_M_C_EXT D_M_CHECK(91)

#define MINDEX_COUNT_MKILIST 92
#define D_M_C_MKILIST D_M_CHECK(92)

#define MINDEX_COUNT_MKLIST 93
#define D_M_C_MKLIST D_M_CHECK(93)

#define MINDEX_COUNT_PUSHH 94
#define D_M_C_PUSHH D_M_CHECK(94)

#define MINDEX_COUNT_DISTEND 95
#define D_M_C_DISTEND D_M_CHECK(95)

#define MINDEX_COUNT_WAIT 96
#define D_M_C_WAIT D_M_CHECK(96)

#define MINDEX_COUNT_POPH 97
#define D_M_C_POPH D_M_CHECK(97)

#define MINDEX_COUNT_PUSH_R 98
#define D_M_C_PUSH_R D_M_CHECK(98)

#define MINDEX_COUNT_PUSHC_R 99
#define D_M_C_PUSHC_R D_M_CHECK(99)

#define MINDEX_COUNT_MOVE_WR 100
#define D_M_C_MOVE_WR D_M_CHECK(100)

#define MINDEX_COUNT_PUSHRET_T 101
#define D_M_C_PUSHRET_T D_M_CHECK(101)

#define MINDEX_COUNT_FREE_R 102
#define D_M_C_FREE_R D_M_CHECK(102)

#define MINDEX_COUNT_FREE1_R 103
#define D_M_C_FREE1_R D_M_CHECK(103)

#define MINDEX_COUNT_RTT 104
#define D_M_C_RTT D_M_CHECK(104)

#define MINDEX_COUNT_RTM_T 105
#define D_M_C_RTM_T D_M_CHECK(105)

#define MINDEX_COUNT_RTC_T 106
#define D_M_C_RTC_T D_M_CHECK(106)

#define MINDEX_COUNT_GAMMA 107
#define D_M_C_GAMMA D_M_CHECK(107)

#define MINDEX_COUNT_GAMMA0 108
#define D_M_C_GAMMA0 D_M_CHECK(108)

#define MINDEX_COUNT_GAMMA1 109
#define D_M_C_GAMMA1 D_M_CHECK(109)

#define MINDEX_COUNT_GAMMAQ 110
#define D_M_C_GAMMAQ D_M_CHECK(110)

#define MINDEX_COUNT_GAMMAQ0 111
#define D_M_C_GAMMAQ0 D_M_CHECK(111)

#define MINDEX_COUNT_GAMMAQ1 112
#define D_M_C_GAMMAQ1 D_M_CHECK(112)

#define MINDEX_COUNT_JTAIL_T 113
#define D_M_C_JTAIL_T D_M_CHECK(113)

#define MINDEX_COUNT_JTAIL0_T 114
#define D_M_C_JTAIL0_T D_M_CHECK(114)

#define MINDEX_COUNT_JTAIL1_T 115
#define D_M_C_JTAIL1_T D_M_CHECK(115)

#define MINDEX_COUNT_JTAILQ_T 116
#define D_M_C_JTAILQ_T D_M_CHECK(116)

#define MINDEX_COUNT_JTAILQ0_T 117
#define D_M_C_JTAILQ0_T D_M_CHECK(117)

#define MINDEX_COUNT_JTAILQ1_T 118
#define D_M_C_JTAILQ1_T D_M_CHECK(118)

#define MINDEX_COUNT_PUSH_TW 119
#define D_M_C_PUSH_TW D_M_CHECK(119)

#define MINDEX_COUNT_PUSH_TW0 120
#define D_M_C_PUSH_TW0 D_M_CHECK(120)

#define MINDEX_COUNT_PUSH_TR 121
#define D_M_C_PUSH_TR D_M_CHECK(121)

#define MINDEX_COUNT_PUSH_TR0 122
#define D_M_C_PUSH_TR0 D_M_CHECK(122)

#define MINDEX_COUNT_PUSH_AR 123
#define D_M_C_PUSH_AR D_M_CHECK(123)

#define MINDEX_COUNT_PUSH_AR0 124
#define D_M_C_PUSH_AR0 D_M_CHECK(124)

#define MINDEX_COUNT_MOVE_TW 125
#define D_M_C_MOVE_TW D_M_CHECK(125)

#define MINDEX_COUNT_MOVE_TR 126
#define D_M_C_MOVE_TR D_M_CHECK(126)

#define MINDEX_COUNT_MOVE_AR 127
#define D_M_C_MOVE_AR D_M_CHECK(127)

#define MINDEX_COUNT_GAMMABETA 128
#define D_M_C_GAMMABETA D_M_CHECK(128)

#define MINDEX_COUNT_FREESW_T 129
#define D_M_C_FREESW_T D_M_CHECK(129)

#define MINDEX_COUNT_GAMMACASE 130
#define D_M_C_GAMMACASE D_M_CHECK(130)

#define MINDEX_COUNT_MKGACLOS 131
#define D_M_C_MKGACLOS D_M_CHECK(131)

#define MINDEX_COUNT_POPFREE_T 132
#define D_M_C_POPFREE_T D_M_CHECK(132)

#define MINDEX_COUNT_MKGSCLOS 133
#define D_M_C_MKGSCLOS D_M_CHECK(133)

#endif /* _d_mess_groups */
