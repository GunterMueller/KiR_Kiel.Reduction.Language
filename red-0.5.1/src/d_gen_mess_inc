#! /bin/awk -f

BEGIN	{
		printf ("/* some measure-macros\n\n");
		printf ("   This file is automatically generated\n");
		printf ("   DO NOT EDIT BELOW ! */\n\n");

		printf ("#ifndef _d_mess_groups\n#define _d_mess_groups\n\n");
#		printf ("#include %cd_mess_names.h%c\n\n", 34, 34);
		printf ("extern char *mess_names[]; /* names */\n");
		printf ("extern char d_bitmask[]; /* bitmask (?!) */\n\n");

		printf ("#define D_M_CHECK(nr) (d_bitmask[nr] == '1')\n\n");

		printf("#if nCUBE\n");
		printf("#define MPRINT_ASCII_COUNT(F, TIME, PROC, PID, NR) \\\n");
		printf("\tfprintf(F, %c%%.lf %%d %%d %%s\\n%c", 34, 34);
		printf(", TIME, PROC, PID, mess_names[NR])\n");
		printf("#else\n");
		printf("#define MPRINT_ASCII_COUNT(F, TIME, PROC, PID, NR) \\\n");
		printf("\tfprintf(F, %c%%.lf %%d %%d %%s\\n%c", 34, 34);
		printf(", TIME, PROC, PID, mess_names[NR])\n");
		printf("#endif\n\n");

		printf("#define MPRINT_COUNT(F, TIME, PROC, PID, NAME) \\\n");
		printf("\tMPRINT_ASCII_COUNT(F, TIME, PROC, PID, NAME)\n");

		printf("#define MSCAN(F, TIME, PROC, PID, ID) \\\n");
		printf("\tfscanf(F, %c%%.lf %%d %%d %%s%c, TIME, PROC, PID, ID)\n", \
		       34, 34);

		printf ("/*  measure names\n\n") > "d_mess_names.h";
                printf ("    This file is automatically generated\n") > "d_mess_names.h";
                printf ("    DO NOT EDIT BELOW ! */\n\n") > "d_mess_names.h";
		printf ("char *mess_names[] = {\n") > "d_mess_names.h";  

                mindex = 1;
	}

/^\t/	{
		if(NF) {
                        if (mindex == 1) {
                          printf("  \"\"\n, \"%s\"\n", $1) > "d_mess_names.h"; }
                        else {
                          printf(", \"%s\"\n", $1) > "d_mess_names.h"; }
			printf("#define MINDEX_%s %d\n", $1, mindex++);
			if (substr($1, 1, 6) == "COUNT_") {
			  printf("#define D_M_C_%s D_M_CHECK(%s)\n", substr($1, 7, length($1)), mindex-1); }
			else {
                          printf("#define D_M_C_%s D_M_CHECK(%s)\n", $1, mindex-1); }


			if(substr($1, 1, 6) != "COUNT_") {
				printf("#define MPRINT_ASCII_"$1"(F, TIME, PROC, PID");
				for(i=2; i<=NF; ++i) {
					printf(", "substr($i, 2));
				}
				printf(") \\\n");

				printf("\tfprintf(F, %c%%.lf %%d %%d %s", 34, $1);
				for(i=2; i<=NF; ++i) {
					if(substr($i, 1, 1)=="#") {
						printf(" %%d");
					} else {
						printf(" %%s");
					}
				}
				printf("\\n%c, TIME, PROC, PID", 34);
				for(i=2; i<=NF; ++i) {
					printf(", "substr($i, 2));
				}
				printf(")\n");

				printf("#define MPRINT_"$1"(F, TIME, PROC, PID");
				for(i=2; i<=NF; ++i) {
					printf(", "substr($i, 2));
				}
				printf(") \\\n");
				printf("\tMPRINT_ASCII_"$1"(F, TIME, PROC, PID");
				for(i=2; i<=NF; ++i) {
					printf(", "substr($i, 2));
				}
				printf(")\n");

				printf("#define MSCAN_"$1"(F");
				for(i=2; i<=NF; ++i) {
					printf(", "substr($i, 2));
				}
				printf(") \\\n");

				printf("\tfscanf(F, %c", 34);
				for(i=2; i<=NF; ++i) {
					if(i>2) {
						printf(" ");
					}
					if(substr($i, 1, 1)=="#") {
						printf("%%d");
					} else {
						printf("%%s");
					}
				}
				printf("\\n%c", 34);
				for(i=2; i<=NF; ++i) {
					printf(", "substr($i, 2));
				}
				printf(")\n");
			}
		}
	}
END {
		printf ("};\n") > "d_mess_names.h";
                printf ("\n#define D_MAX_NAMES %d\n", mindex-1) > "d_mess_names.h";
		printf ("#endif\n");
}
